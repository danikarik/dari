// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDiscounts(t *testing.T) {
	t.Parallel()

	query := Discounts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDiscountsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Discounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscountsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Discounts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Discounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscountsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiscountSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Discounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscountsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DiscountExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Discount exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DiscountExists to return true, but got false.")
	}
}

func testDiscountsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	discountFound, err := FindDiscount(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if discountFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDiscountsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Discounts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDiscountsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Discounts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDiscountsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	discountOne := &Discount{}
	discountTwo := &Discount{}
	if err = randomize.Struct(seed, discountOne, discountDBTypes, false, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}
	if err = randomize.Struct(seed, discountTwo, discountDBTypes, false, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = discountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = discountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Discounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDiscountsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	discountOne := &Discount{}
	discountTwo := &Discount{}
	if err = randomize.Struct(seed, discountOne, discountDBTypes, false, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}
	if err = randomize.Struct(seed, discountTwo, discountDBTypes, false, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = discountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = discountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Discounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func discountBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Discount) error {
	*o = Discount{}
	return nil
}

func discountAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Discount) error {
	*o = Discount{}
	return nil
}

func discountAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Discount) error {
	*o = Discount{}
	return nil
}

func discountBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Discount) error {
	*o = Discount{}
	return nil
}

func discountAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Discount) error {
	*o = Discount{}
	return nil
}

func discountBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Discount) error {
	*o = Discount{}
	return nil
}

func discountAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Discount) error {
	*o = Discount{}
	return nil
}

func discountBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Discount) error {
	*o = Discount{}
	return nil
}

func discountAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Discount) error {
	*o = Discount{}
	return nil
}

func testDiscountsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Discount{}
	o := &Discount{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, discountDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Discount object: %s", err)
	}

	AddDiscountHook(boil.BeforeInsertHook, discountBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	discountBeforeInsertHooks = []DiscountHook{}

	AddDiscountHook(boil.AfterInsertHook, discountAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	discountAfterInsertHooks = []DiscountHook{}

	AddDiscountHook(boil.AfterSelectHook, discountAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	discountAfterSelectHooks = []DiscountHook{}

	AddDiscountHook(boil.BeforeUpdateHook, discountBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	discountBeforeUpdateHooks = []DiscountHook{}

	AddDiscountHook(boil.AfterUpdateHook, discountAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	discountAfterUpdateHooks = []DiscountHook{}

	AddDiscountHook(boil.BeforeDeleteHook, discountBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	discountBeforeDeleteHooks = []DiscountHook{}

	AddDiscountHook(boil.AfterDeleteHook, discountAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	discountAfterDeleteHooks = []DiscountHook{}

	AddDiscountHook(boil.BeforeUpsertHook, discountBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	discountBeforeUpsertHooks = []DiscountHook{}

	AddDiscountHook(boil.AfterUpsertHook, discountAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	discountAfterUpsertHooks = []DiscountHook{}
}

func testDiscountsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Discounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiscountsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(discountColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Discounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiscountToOneCategoryUsingCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Discount
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, discountDBTypes, false, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CategoryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DiscountSlice{&local}
	if err = local.L.LoadCategory(ctx, tx, false, (*[]*Discount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDiscountToOneManufacturerUsingManufacturer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Discount
	var foreign Manufacturer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, discountDBTypes, false, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, manufacturerDBTypes, false, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ManufacturerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Manufacturer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DiscountSlice{&local}
	if err = local.L.LoadManufacturer(ctx, tx, false, (*[]*Discount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Manufacturer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Manufacturer = nil
	if err = local.L.LoadManufacturer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Manufacturer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDiscountToOneSubcategoryUsingSubcategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Discount
	var foreign Subcategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, subcategoryDBTypes, false, subcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subcategory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SubcategoryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Subcategory().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DiscountSlice{&local}
	if err = local.L.LoadSubcategory(ctx, tx, false, (*[]*Discount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Subcategory == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Subcategory = nil
	if err = local.L.LoadSubcategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Subcategory == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDiscountToOneSetOpCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Discount
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountDBTypes, false, strmangle.SetComplement(discountPrimaryKeyColumns, discountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Discounts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CategoryID != x.ID {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CategoryID))
		reflect.Indirect(reflect.ValueOf(&a.CategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CategoryID != x.ID {
			t.Error("foreign key was wrong value", a.CategoryID, x.ID)
		}
	}
}
func testDiscountToOneSetOpManufacturerUsingManufacturer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Discount
	var b, c Manufacturer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountDBTypes, false, strmangle.SetComplement(discountPrimaryKeyColumns, discountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, manufacturerDBTypes, false, strmangle.SetComplement(manufacturerPrimaryKeyColumns, manufacturerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, manufacturerDBTypes, false, strmangle.SetComplement(manufacturerPrimaryKeyColumns, manufacturerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Manufacturer{&b, &c} {
		err = a.SetManufacturer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Manufacturer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Discounts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ManufacturerID != x.ID {
			t.Error("foreign key was wrong value", a.ManufacturerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ManufacturerID))
		reflect.Indirect(reflect.ValueOf(&a.ManufacturerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ManufacturerID != x.ID {
			t.Error("foreign key was wrong value", a.ManufacturerID, x.ID)
		}
	}
}
func testDiscountToOneSetOpSubcategoryUsingSubcategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Discount
	var b, c Subcategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountDBTypes, false, strmangle.SetComplement(discountPrimaryKeyColumns, discountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, subcategoryDBTypes, false, strmangle.SetComplement(subcategoryPrimaryKeyColumns, subcategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, subcategoryDBTypes, false, strmangle.SetComplement(subcategoryPrimaryKeyColumns, subcategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Subcategory{&b, &c} {
		err = a.SetSubcategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Subcategory != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Discounts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SubcategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.SubcategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SubcategoryID))
		reflect.Indirect(reflect.ValueOf(&a.SubcategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SubcategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.SubcategoryID, x.ID)
		}
	}
}

func testDiscountToOneRemoveOpSubcategoryUsingSubcategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Discount
	var b Subcategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountDBTypes, false, strmangle.SetComplement(discountPrimaryKeyColumns, discountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, subcategoryDBTypes, false, strmangle.SetComplement(subcategoryPrimaryKeyColumns, subcategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSubcategory(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSubcategory(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Subcategory().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Subcategory != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SubcategoryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Discounts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDiscountsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiscountsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiscountSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiscountsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Discounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	discountDBTypes = map[string]string{`CategoryID`: `int`, `CreatedAt`: `timestamp`, `ID`: `int`, `IsFixed`: `tinyint`, `ManufacturerID`: `int`, `Naming`: `varchar`, `SubcategoryID`: `int`, `UpdatedAt`: `timestamp`, `ValueFrom`: `decimal`, `ValueTo`: `decimal`}
	_               = bytes.MinRead
)

func testDiscountsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(discountPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(discountColumns) == len(discountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Discounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, discountDBTypes, true, discountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDiscountsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(discountColumns) == len(discountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Discount{}
	if err = randomize.Struct(seed, o, discountDBTypes, true, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Discounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, discountDBTypes, true, discountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(discountColumns, discountPrimaryKeyColumns) {
		fields = discountColumns
	} else {
		fields = strmangle.SetComplement(
			discountColumns,
			discountPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DiscountSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDiscountsUpsert(t *testing.T) {
	t.Parallel()

	if len(discountColumns) == len(discountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDiscountUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Discount{}
	if err = randomize.Struct(seed, &o, discountDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Discount: %s", err)
	}

	count, err := Discounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, discountDBTypes, false, discountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Discount: %s", err)
	}

	count, err = Discounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
