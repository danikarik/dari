// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Registry is an object representing the database table.
type Registry struct {
	ID               uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title            string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Number           string    `boil:"number" json:"number" toml:"number" yaml:"number"`
	IssueDate        time.Time `boil:"issue_date" json:"issue_date" toml:"issue_date" yaml:"issue_date"`
	ExpireDate       null.Time `boil:"expire_date" json:"expire_date,omitempty" toml:"expire_date" yaml:"expire_date,omitempty"`
	Duration         int       `boil:"duration" json:"duration" toml:"duration" yaml:"duration"`
	Link             string    `boil:"link" json:"link" toml:"link" yaml:"link"`
	RegistryStatusID uint      `boil:"registry_status_id" json:"registry_status_id" toml:"registry_status_id" yaml:"registry_status_id"`
	CreatedAt        null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *registryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L registryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RegistryColumns = struct {
	ID               string
	Title            string
	Number           string
	IssueDate        string
	ExpireDate       string
	Duration         string
	Link             string
	RegistryStatusID string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	Title:            "title",
	Number:           "number",
	IssueDate:        "issue_date",
	ExpireDate:       "expire_date",
	Duration:         "duration",
	Link:             "link",
	RegistryStatusID: "registry_status_id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// RegistryRels is where relationship names are stored.
var RegistryRels = struct {
	RegistryStatus          string
	Products                string
	RegistryBuilds          string
	RegistryFieldStats      string
	RegistryManufacturers   string
	RegistryRecommendations string
}{
	RegistryStatus:          "RegistryStatus",
	Products:                "Products",
	RegistryBuilds:          "RegistryBuilds",
	RegistryFieldStats:      "RegistryFieldStats",
	RegistryManufacturers:   "RegistryManufacturers",
	RegistryRecommendations: "RegistryRecommendations",
}

// registryR is where relationships are stored.
type registryR struct {
	RegistryStatus          *RegistryStatus
	Products                ProductSlice
	RegistryBuilds          RegistryBuildSlice
	RegistryFieldStats      RegistryFieldStatSlice
	RegistryManufacturers   RegistryManufacturerSlice
	RegistryRecommendations RegistryRecommendationSlice
}

// NewStruct creates a new relationship struct
func (*registryR) NewStruct() *registryR {
	return &registryR{}
}

// registryL is where Load methods for each relationship are stored.
type registryL struct{}

var (
	registryColumns               = []string{"id", "title", "number", "issue_date", "expire_date", "duration", "link", "registry_status_id", "created_at", "updated_at"}
	registryColumnsWithoutDefault = []string{"id", "title", "number", "issue_date", "expire_date", "duration", "link", "registry_status_id", "created_at", "updated_at"}
	registryColumnsWithDefault    = []string{}
	registryPrimaryKeyColumns     = []string{"id"}
)

type (
	// RegistrySlice is an alias for a slice of pointers to Registry.
	// This should generally be used opposed to []Registry.
	RegistrySlice []*Registry
	// RegistryHook is the signature for custom Registry hook methods
	RegistryHook func(context.Context, boil.ContextExecutor, *Registry) error

	registryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	registryType                 = reflect.TypeOf(&Registry{})
	registryMapping              = queries.MakeStructMapping(registryType)
	registryPrimaryKeyMapping, _ = queries.BindMapping(registryType, registryMapping, registryPrimaryKeyColumns)
	registryInsertCacheMut       sync.RWMutex
	registryInsertCache          = make(map[string]insertCache)
	registryUpdateCacheMut       sync.RWMutex
	registryUpdateCache          = make(map[string]updateCache)
	registryUpsertCacheMut       sync.RWMutex
	registryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var registryBeforeInsertHooks []RegistryHook
var registryBeforeUpdateHooks []RegistryHook
var registryBeforeDeleteHooks []RegistryHook
var registryBeforeUpsertHooks []RegistryHook

var registryAfterInsertHooks []RegistryHook
var registryAfterSelectHooks []RegistryHook
var registryAfterUpdateHooks []RegistryHook
var registryAfterDeleteHooks []RegistryHook
var registryAfterUpsertHooks []RegistryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Registry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Registry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Registry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Registry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Registry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Registry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Registry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Registry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Registry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRegistryHook registers your hook function for all future operations.
func AddRegistryHook(hookPoint boil.HookPoint, registryHook RegistryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		registryBeforeInsertHooks = append(registryBeforeInsertHooks, registryHook)
	case boil.BeforeUpdateHook:
		registryBeforeUpdateHooks = append(registryBeforeUpdateHooks, registryHook)
	case boil.BeforeDeleteHook:
		registryBeforeDeleteHooks = append(registryBeforeDeleteHooks, registryHook)
	case boil.BeforeUpsertHook:
		registryBeforeUpsertHooks = append(registryBeforeUpsertHooks, registryHook)
	case boil.AfterInsertHook:
		registryAfterInsertHooks = append(registryAfterInsertHooks, registryHook)
	case boil.AfterSelectHook:
		registryAfterSelectHooks = append(registryAfterSelectHooks, registryHook)
	case boil.AfterUpdateHook:
		registryAfterUpdateHooks = append(registryAfterUpdateHooks, registryHook)
	case boil.AfterDeleteHook:
		registryAfterDeleteHooks = append(registryAfterDeleteHooks, registryHook)
	case boil.AfterUpsertHook:
		registryAfterUpsertHooks = append(registryAfterUpsertHooks, registryHook)
	}
}

// One returns a single registry record from the query.
func (q registryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Registry, error) {
	o := &Registry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for registries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Registry records from the query.
func (q registryQuery) All(ctx context.Context, exec boil.ContextExecutor) (RegistrySlice, error) {
	var o []*Registry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Registry slice")
	}

	if len(registryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Registry records in the query.
func (q registryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count registries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q registryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if registries exists")
	}

	return count > 0, nil
}

// RegistryStatus pointed to by the foreign key.
func (o *Registry) RegistryStatus(mods ...qm.QueryMod) registryStatusQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RegistryStatusID),
	}

	queryMods = append(queryMods, mods...)

	query := RegistryStatuses(queryMods...)
	queries.SetFrom(query.Query, "`registry_statuses`")

	return query
}

// Products retrieves all the product's Products with an executor.
func (o *Registry) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`products`.`registry_id`=?", o.ID),
	)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "`products`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`products`.*"})
	}

	return query
}

// RegistryBuilds retrieves all the registry_build's RegistryBuilds with an executor.
func (o *Registry) RegistryBuilds(mods ...qm.QueryMod) registryBuildQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`registry_builds`.`registry_id`=?", o.ID),
	)

	query := RegistryBuilds(queryMods...)
	queries.SetFrom(query.Query, "`registry_builds`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`registry_builds`.*"})
	}

	return query
}

// RegistryFieldStats retrieves all the registry_field_stat's RegistryFieldStats with an executor.
func (o *Registry) RegistryFieldStats(mods ...qm.QueryMod) registryFieldStatQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`registry_field_stats`.`registry_id`=?", o.ID),
	)

	query := RegistryFieldStats(queryMods...)
	queries.SetFrom(query.Query, "`registry_field_stats`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`registry_field_stats`.*"})
	}

	return query
}

// RegistryManufacturers retrieves all the registry_manufacturer's RegistryManufacturers with an executor.
func (o *Registry) RegistryManufacturers(mods ...qm.QueryMod) registryManufacturerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`registry_manufacturers`.`registry_id`=?", o.ID),
	)

	query := RegistryManufacturers(queryMods...)
	queries.SetFrom(query.Query, "`registry_manufacturers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`registry_manufacturers`.*"})
	}

	return query
}

// RegistryRecommendations retrieves all the registry_recommendation's RegistryRecommendations with an executor.
func (o *Registry) RegistryRecommendations(mods ...qm.QueryMod) registryRecommendationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`registry_recommendations`.`registry_id`=?", o.ID),
	)

	query := RegistryRecommendations(queryMods...)
	queries.SetFrom(query.Query, "`registry_recommendations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`registry_recommendations`.*"})
	}

	return query
}

// LoadRegistryStatus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (registryL) LoadRegistryStatus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegistry interface{}, mods queries.Applicator) error {
	var slice []*Registry
	var object *Registry

	if singular {
		object = maybeRegistry.(*Registry)
	} else {
		slice = *maybeRegistry.(*[]*Registry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registryR{}
		}
		args = append(args, object.RegistryStatusID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registryR{}
			}

			for _, a := range args {
				if a == obj.RegistryStatusID {
					continue Outer
				}
			}

			args = append(args, obj.RegistryStatusID)
		}
	}

	query := NewQuery(qm.From(`registry_statuses`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RegistryStatus")
	}

	var resultSlice []*RegistryStatus
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RegistryStatus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for registry_statuses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for registry_statuses")
	}

	if len(registryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RegistryStatus = foreign
		if foreign.R == nil {
			foreign.R = &registryStatusR{}
		}
		foreign.R.Registries = append(foreign.R.Registries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RegistryStatusID == foreign.ID {
				local.R.RegistryStatus = foreign
				if foreign.R == nil {
					foreign.R = &registryStatusR{}
				}
				foreign.R.Registries = append(foreign.R.Registries, local)
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (registryL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegistry interface{}, mods queries.Applicator) error {
	var slice []*Registry
	var object *Registry

	if singular {
		object = maybeRegistry.(*Registry)
	} else {
		slice = *maybeRegistry.(*[]*Registry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`products`), qm.WhereIn(`registry_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Registry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RegistryID) {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Registry = local
				break
			}
		}
	}

	return nil
}

// LoadRegistryBuilds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (registryL) LoadRegistryBuilds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegistry interface{}, mods queries.Applicator) error {
	var slice []*Registry
	var object *Registry

	if singular {
		object = maybeRegistry.(*Registry)
	} else {
		slice = *maybeRegistry.(*[]*Registry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`registry_builds`), qm.WhereIn(`registry_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load registry_builds")
	}

	var resultSlice []*RegistryBuild
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice registry_builds")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on registry_builds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for registry_builds")
	}

	if len(registryBuildAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RegistryBuilds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &registryBuildR{}
			}
			foreign.R.Registry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RegistryID {
				local.R.RegistryBuilds = append(local.R.RegistryBuilds, foreign)
				if foreign.R == nil {
					foreign.R = &registryBuildR{}
				}
				foreign.R.Registry = local
				break
			}
		}
	}

	return nil
}

// LoadRegistryFieldStats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (registryL) LoadRegistryFieldStats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegistry interface{}, mods queries.Applicator) error {
	var slice []*Registry
	var object *Registry

	if singular {
		object = maybeRegistry.(*Registry)
	} else {
		slice = *maybeRegistry.(*[]*Registry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`registry_field_stats`), qm.WhereIn(`registry_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load registry_field_stats")
	}

	var resultSlice []*RegistryFieldStat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice registry_field_stats")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on registry_field_stats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for registry_field_stats")
	}

	if len(registryFieldStatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RegistryFieldStats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &registryFieldStatR{}
			}
			foreign.R.Registry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RegistryID) {
				local.R.RegistryFieldStats = append(local.R.RegistryFieldStats, foreign)
				if foreign.R == nil {
					foreign.R = &registryFieldStatR{}
				}
				foreign.R.Registry = local
				break
			}
		}
	}

	return nil
}

// LoadRegistryManufacturers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (registryL) LoadRegistryManufacturers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegistry interface{}, mods queries.Applicator) error {
	var slice []*Registry
	var object *Registry

	if singular {
		object = maybeRegistry.(*Registry)
	} else {
		slice = *maybeRegistry.(*[]*Registry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`registry_manufacturers`), qm.WhereIn(`registry_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load registry_manufacturers")
	}

	var resultSlice []*RegistryManufacturer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice registry_manufacturers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on registry_manufacturers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for registry_manufacturers")
	}

	if len(registryManufacturerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RegistryManufacturers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &registryManufacturerR{}
			}
			foreign.R.Registry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RegistryID {
				local.R.RegistryManufacturers = append(local.R.RegistryManufacturers, foreign)
				if foreign.R == nil {
					foreign.R = &registryManufacturerR{}
				}
				foreign.R.Registry = local
				break
			}
		}
	}

	return nil
}

// LoadRegistryRecommendations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (registryL) LoadRegistryRecommendations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegistry interface{}, mods queries.Applicator) error {
	var slice []*Registry
	var object *Registry

	if singular {
		object = maybeRegistry.(*Registry)
	} else {
		slice = *maybeRegistry.(*[]*Registry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`registry_recommendations`), qm.WhereIn(`registry_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load registry_recommendations")
	}

	var resultSlice []*RegistryRecommendation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice registry_recommendations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on registry_recommendations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for registry_recommendations")
	}

	if len(registryRecommendationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RegistryRecommendations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &registryRecommendationR{}
			}
			foreign.R.Registry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RegistryID {
				local.R.RegistryRecommendations = append(local.R.RegistryRecommendations, foreign)
				if foreign.R == nil {
					foreign.R = &registryRecommendationR{}
				}
				foreign.R.Registry = local
				break
			}
		}
	}

	return nil
}

// SetRegistryStatus of the registry to the related item.
// Sets o.R.RegistryStatus to related.
// Adds o to related.R.Registries.
func (o *Registry) SetRegistryStatus(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RegistryStatus) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `registries` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"registry_status_id"}),
		strmangle.WhereClause("`", "`", 0, registryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RegistryStatusID = related.ID
	if o.R == nil {
		o.R = &registryR{
			RegistryStatus: related,
		}
	} else {
		o.R.RegistryStatus = related
	}

	if related.R == nil {
		related.R = &registryStatusR{
			Registries: RegistrySlice{o},
		}
	} else {
		related.R.Registries = append(related.R.Registries, o)
	}

	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the registry, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Registry appropriately.
func (o *Registry) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RegistryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `products` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"registry_id"}),
				strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RegistryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &registryR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Registry: o,
			}
		} else {
			rel.R.Registry = o
		}
	}
	return nil
}

// SetProducts removes all previously related items of the
// registry replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Registry's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.Registry's Products accordingly.
func (o *Registry) SetProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	query := "update `products` set `registry_id` = null where `registry_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Products {
			queries.SetScanner(&rel.RegistryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Registry = nil
		}

		o.R.Products = nil
	}
	return o.AddProducts(ctx, exec, insert, related...)
}

// RemoveProducts relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.Registry.
func (o *Registry) RemoveProducts(ctx context.Context, exec boil.ContextExecutor, related ...*Product) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RegistryID, nil)
		if rel.R != nil {
			rel.R.Registry = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("registry_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Products {
			if rel != ri {
				continue
			}

			ln := len(o.R.Products)
			if ln > 1 && i < ln-1 {
				o.R.Products[i] = o.R.Products[ln-1]
			}
			o.R.Products = o.R.Products[:ln-1]
			break
		}
	}

	return nil
}

// AddRegistryBuilds adds the given related objects to the existing relationships
// of the registry, optionally inserting them as new records.
// Appends related to o.R.RegistryBuilds.
// Sets related.R.Registry appropriately.
func (o *Registry) AddRegistryBuilds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RegistryBuild) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RegistryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `registry_builds` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"registry_id"}),
				strmangle.WhereClause("`", "`", 0, registryBuildPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RegistryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &registryR{
			RegistryBuilds: related,
		}
	} else {
		o.R.RegistryBuilds = append(o.R.RegistryBuilds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &registryBuildR{
				Registry: o,
			}
		} else {
			rel.R.Registry = o
		}
	}
	return nil
}

// AddRegistryFieldStats adds the given related objects to the existing relationships
// of the registry, optionally inserting them as new records.
// Appends related to o.R.RegistryFieldStats.
// Sets related.R.Registry appropriately.
func (o *Registry) AddRegistryFieldStats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RegistryFieldStat) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RegistryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `registry_field_stats` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"registry_id"}),
				strmangle.WhereClause("`", "`", 0, registryFieldStatPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RegistryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &registryR{
			RegistryFieldStats: related,
		}
	} else {
		o.R.RegistryFieldStats = append(o.R.RegistryFieldStats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &registryFieldStatR{
				Registry: o,
			}
		} else {
			rel.R.Registry = o
		}
	}
	return nil
}

// SetRegistryFieldStats removes all previously related items of the
// registry replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Registry's RegistryFieldStats accordingly.
// Replaces o.R.RegistryFieldStats with related.
// Sets related.R.Registry's RegistryFieldStats accordingly.
func (o *Registry) SetRegistryFieldStats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RegistryFieldStat) error {
	query := "update `registry_field_stats` set `registry_id` = null where `registry_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RegistryFieldStats {
			queries.SetScanner(&rel.RegistryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Registry = nil
		}

		o.R.RegistryFieldStats = nil
	}
	return o.AddRegistryFieldStats(ctx, exec, insert, related...)
}

// RemoveRegistryFieldStats relationships from objects passed in.
// Removes related items from R.RegistryFieldStats (uses pointer comparison, removal does not keep order)
// Sets related.R.Registry.
func (o *Registry) RemoveRegistryFieldStats(ctx context.Context, exec boil.ContextExecutor, related ...*RegistryFieldStat) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RegistryID, nil)
		if rel.R != nil {
			rel.R.Registry = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("registry_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RegistryFieldStats {
			if rel != ri {
				continue
			}

			ln := len(o.R.RegistryFieldStats)
			if ln > 1 && i < ln-1 {
				o.R.RegistryFieldStats[i] = o.R.RegistryFieldStats[ln-1]
			}
			o.R.RegistryFieldStats = o.R.RegistryFieldStats[:ln-1]
			break
		}
	}

	return nil
}

// AddRegistryManufacturers adds the given related objects to the existing relationships
// of the registry, optionally inserting them as new records.
// Appends related to o.R.RegistryManufacturers.
// Sets related.R.Registry appropriately.
func (o *Registry) AddRegistryManufacturers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RegistryManufacturer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RegistryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `registry_manufacturers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"registry_id"}),
				strmangle.WhereClause("`", "`", 0, registryManufacturerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RegistryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &registryR{
			RegistryManufacturers: related,
		}
	} else {
		o.R.RegistryManufacturers = append(o.R.RegistryManufacturers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &registryManufacturerR{
				Registry: o,
			}
		} else {
			rel.R.Registry = o
		}
	}
	return nil
}

// AddRegistryRecommendations adds the given related objects to the existing relationships
// of the registry, optionally inserting them as new records.
// Appends related to o.R.RegistryRecommendations.
// Sets related.R.Registry appropriately.
func (o *Registry) AddRegistryRecommendations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RegistryRecommendation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RegistryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `registry_recommendations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"registry_id"}),
				strmangle.WhereClause("`", "`", 0, registryRecommendationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RegistryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &registryR{
			RegistryRecommendations: related,
		}
	} else {
		o.R.RegistryRecommendations = append(o.R.RegistryRecommendations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &registryRecommendationR{
				Registry: o,
			}
		} else {
			rel.R.Registry = o
		}
	}
	return nil
}

// Registries retrieves all the records using an executor.
func Registries(mods ...qm.QueryMod) registryQuery {
	mods = append(mods, qm.From("`registries`"))
	return registryQuery{NewQuery(mods...)}
}

// FindRegistry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRegistry(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Registry, error) {
	registryObj := &Registry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `registries` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, registryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from registries")
	}

	return registryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Registry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no registries provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(registryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	registryInsertCacheMut.RLock()
	cache, cached := registryInsertCache[key]
	registryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			registryColumns,
			registryColumnsWithDefault,
			registryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(registryType, registryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(registryType, registryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `registries` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `registries` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `registries` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, registryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into registries")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for registries")
	}

CacheNoHooks:
	if !cached {
		registryInsertCacheMut.Lock()
		registryInsertCache[key] = cache
		registryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Registry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Registry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	registryUpdateCacheMut.RLock()
	cache, cached := registryUpdateCache[key]
	registryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			registryColumns,
			registryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update registries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `registries` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, registryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(registryType, registryMapping, append(wl, registryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update registries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for registries")
	}

	if !cached {
		registryUpdateCacheMut.Lock()
		registryUpdateCache[key] = cache
		registryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q registryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for registries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for registries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RegistrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `registries` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in registry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all registry")
	}
	return rowsAff, nil
}

var mySQLRegistryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Registry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no registries provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(registryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRegistryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	registryUpsertCacheMut.RLock()
	cache, cached := registryUpsertCache[key]
	registryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			registryColumns,
			registryColumnsWithDefault,
			registryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			registryColumns,
			registryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert registries, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "registries", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `registries` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(registryType, registryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(registryType, registryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for registries")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(registryType, registryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for registries")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for registries")
	}

CacheNoHooks:
	if !cached {
		registryUpsertCacheMut.Lock()
		registryUpsertCache[key] = cache
		registryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Registry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Registry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Registry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), registryPrimaryKeyMapping)
	sql := "DELETE FROM `registries` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from registries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for registries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q registryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no registryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from registries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for registries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RegistrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Registry slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(registryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `registries` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from registry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for registries")
	}

	if len(registryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Registry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRegistry(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RegistrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RegistrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `registries`.* FROM `registries` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RegistrySlice")
	}

	*o = slice

	return nil
}

// RegistryExists checks if the Registry row exists.
func RegistryExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `registries` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if registries exists")
	}

	return exists, nil
}
