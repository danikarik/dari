// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Product is an object representing the database table.
type Product struct {
	ID             uint          `boil:"id" json:"id" toml:"id" yaml:"id"`
	PricelistID    uint          `boil:"pricelist_id" json:"pricelist_id" toml:"pricelist_id" yaml:"pricelist_id"`
	RegistryLink   null.String   `boil:"registry_link" json:"registry_link,omitempty" toml:"registry_link" yaml:"registry_link,omitempty"`
	ActualDate     null.Int      `boil:"actual_date" json:"actual_date,omitempty" toml:"actual_date" yaml:"actual_date,omitempty"`
	PartNumber     null.String   `boil:"part_number" json:"part_number,omitempty" toml:"part_number" yaml:"part_number,omitempty"`
	BaseName       string        `boil:"base_name" json:"base_name" toml:"base_name" yaml:"base_name"`
	ModelNumber    string        `boil:"model_number" json:"model_number" toml:"model_number" yaml:"model_number"`
	BasePrice      types.Decimal `boil:"base_price" json:"base_price" toml:"base_price" yaml:"base_price"`
	CurrencyID     uint          `boil:"currency_id" json:"currency_id" toml:"currency_id" yaml:"currency_id"`
	ManufacturerID uint          `boil:"manufacturer_id" json:"manufacturer_id" toml:"manufacturer_id" yaml:"manufacturer_id"`
	CategoryID     uint          `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	SubcategoryID  null.Uint     `boil:"subcategory_id" json:"subcategory_id,omitempty" toml:"subcategory_id" yaml:"subcategory_id,omitempty"`
	MaterialID     null.Uint     `boil:"material_id" json:"material_id,omitempty" toml:"material_id" yaml:"material_id,omitempty"`
	CreatedAt      null.Time     `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time     `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt      null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *productR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductColumns = struct {
	ID             string
	PricelistID    string
	RegistryLink   string
	ActualDate     string
	PartNumber     string
	BaseName       string
	ModelNumber    string
	BasePrice      string
	CurrencyID     string
	ManufacturerID string
	CategoryID     string
	SubcategoryID  string
	MaterialID     string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	PricelistID:    "pricelist_id",
	RegistryLink:   "registry_link",
	ActualDate:     "actual_date",
	PartNumber:     "part_number",
	BaseName:       "base_name",
	ModelNumber:    "model_number",
	BasePrice:      "base_price",
	CurrencyID:     "currency_id",
	ManufacturerID: "manufacturer_id",
	CategoryID:     "category_id",
	SubcategoryID:  "subcategory_id",
	MaterialID:     "material_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

// ProductRels is where relationship names are stored.
var ProductRels = struct {
	Category     string
	Currency     string
	Manufacturer string
	Material     string
	Pricelist    string
	Subcategory  string
	Descriptions string
	Offers       string
}{
	Category:     "Category",
	Currency:     "Currency",
	Manufacturer: "Manufacturer",
	Material:     "Material",
	Pricelist:    "Pricelist",
	Subcategory:  "Subcategory",
	Descriptions: "Descriptions",
	Offers:       "Offers",
}

// productR is where relationships are stored.
type productR struct {
	Category     *Category
	Currency     *Currency
	Manufacturer *Manufacturer
	Material     *Material
	Pricelist    *Pricelist
	Subcategory  *Subcategory
	Descriptions DescriptionSlice
	Offers       OfferSlice
}

// NewStruct creates a new relationship struct
func (*productR) NewStruct() *productR {
	return &productR{}
}

// productL is where Load methods for each relationship are stored.
type productL struct{}

var (
	productColumns               = []string{"id", "pricelist_id", "registry_link", "actual_date", "part_number", "base_name", "model_number", "base_price", "currency_id", "manufacturer_id", "category_id", "subcategory_id", "material_id", "created_at", "updated_at", "deleted_at"}
	productColumnsWithoutDefault = []string{"pricelist_id", "registry_link", "actual_date", "part_number", "base_name", "model_number", "base_price", "currency_id", "manufacturer_id", "category_id", "subcategory_id", "material_id", "created_at", "updated_at", "deleted_at"}
	productColumnsWithDefault    = []string{"id"}
	productPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProductSlice is an alias for a slice of pointers to Product.
	// This should generally be used opposed to []Product.
	ProductSlice []*Product
	// ProductHook is the signature for custom Product hook methods
	ProductHook func(context.Context, boil.ContextExecutor, *Product) error

	productQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productType                 = reflect.TypeOf(&Product{})
	productMapping              = queries.MakeStructMapping(productType)
	productPrimaryKeyMapping, _ = queries.BindMapping(productType, productMapping, productPrimaryKeyColumns)
	productInsertCacheMut       sync.RWMutex
	productInsertCache          = make(map[string]insertCache)
	productUpdateCacheMut       sync.RWMutex
	productUpdateCache          = make(map[string]updateCache)
	productUpsertCacheMut       sync.RWMutex
	productUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var productBeforeInsertHooks []ProductHook
var productBeforeUpdateHooks []ProductHook
var productBeforeDeleteHooks []ProductHook
var productBeforeUpsertHooks []ProductHook

var productAfterInsertHooks []ProductHook
var productAfterSelectHooks []ProductHook
var productAfterUpdateHooks []ProductHook
var productAfterDeleteHooks []ProductHook
var productAfterUpsertHooks []ProductHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Product) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range productBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Product) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range productBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Product) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range productBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Product) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range productBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Product) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range productAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Product) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range productAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Product) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range productAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Product) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range productAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Product) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range productAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductHook registers your hook function for all future operations.
func AddProductHook(hookPoint boil.HookPoint, productHook ProductHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productBeforeInsertHooks = append(productBeforeInsertHooks, productHook)
	case boil.BeforeUpdateHook:
		productBeforeUpdateHooks = append(productBeforeUpdateHooks, productHook)
	case boil.BeforeDeleteHook:
		productBeforeDeleteHooks = append(productBeforeDeleteHooks, productHook)
	case boil.BeforeUpsertHook:
		productBeforeUpsertHooks = append(productBeforeUpsertHooks, productHook)
	case boil.AfterInsertHook:
		productAfterInsertHooks = append(productAfterInsertHooks, productHook)
	case boil.AfterSelectHook:
		productAfterSelectHooks = append(productAfterSelectHooks, productHook)
	case boil.AfterUpdateHook:
		productAfterUpdateHooks = append(productAfterUpdateHooks, productHook)
	case boil.AfterDeleteHook:
		productAfterDeleteHooks = append(productAfterDeleteHooks, productHook)
	case boil.AfterUpsertHook:
		productAfterUpsertHooks = append(productAfterUpsertHooks, productHook)
	}
}

// One returns a single product record from the query.
func (q productQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Product, error) {
	o := &Product{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Product records from the query.
func (q productQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductSlice, error) {
	var o []*Product

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Product slice")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Product records in the query.
func (q productQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if products exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Product) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := Categories(queryMods...)
	queries.SetFrom(query.Query, "`categories`")

	return query
}

// Currency pointed to by the foreign key.
func (o *Product) Currency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Currencies(queryMods...)
	queries.SetFrom(query.Query, "`currencies`")

	return query
}

// Manufacturer pointed to by the foreign key.
func (o *Product) Manufacturer(mods ...qm.QueryMod) manufacturerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ManufacturerID),
	}

	queryMods = append(queryMods, mods...)

	query := Manufacturers(queryMods...)
	queries.SetFrom(query.Query, "`manufacturers`")

	return query
}

// Material pointed to by the foreign key.
func (o *Product) Material(mods ...qm.QueryMod) materialQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.MaterialID),
	}

	queryMods = append(queryMods, mods...)

	query := Materials(queryMods...)
	queries.SetFrom(query.Query, "`materials`")

	return query
}

// Pricelist pointed to by the foreign key.
func (o *Product) Pricelist(mods ...qm.QueryMod) pricelistQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PricelistID),
	}

	queryMods = append(queryMods, mods...)

	query := Pricelists(queryMods...)
	queries.SetFrom(query.Query, "`pricelists`")

	return query
}

// Subcategory pointed to by the foreign key.
func (o *Product) Subcategory(mods ...qm.QueryMod) subcategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SubcategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := Subcategories(queryMods...)
	queries.SetFrom(query.Query, "`subcategories`")

	return query
}

// Descriptions retrieves all the description's Descriptions with an executor.
func (o *Product) Descriptions(mods ...qm.QueryMod) descriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`descriptions`.`product_id`=?", o.ID),
	)

	query := Descriptions(queryMods...)
	queries.SetFrom(query.Query, "`descriptions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`descriptions`.*"})
	}

	return query
}

// Offers retrieves all the offer's Offers with an executor.
func (o *Product) Offers(mods ...qm.QueryMod) offerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`offers`.`product_id`=?", o.ID),
	)

	query := Offers(queryMods...)
	queries.SetFrom(query.Query, "`offers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`offers`.*"})
	}

	return query
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.CategoryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)
		}
	}

	query := NewQuery(qm.From(`categories`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.Products = append(foreign.R.Products, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.ID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadCurrency(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.CurrencyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.CurrencyID {
					continue Outer
				}
			}

			args = append(args, obj.CurrencyID)
		}
	}

	query := NewQuery(qm.From(`currencies`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currencies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currencies")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Currency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.Products = append(foreign.R.Products, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurrencyID == foreign.ID {
				local.R.Currency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadManufacturer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadManufacturer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ManufacturerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.ManufacturerID {
					continue Outer
				}
			}

			args = append(args, obj.ManufacturerID)
		}
	}

	query := NewQuery(qm.From(`manufacturers`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Manufacturer")
	}

	var resultSlice []*Manufacturer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Manufacturer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for manufacturers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for manufacturers")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Manufacturer = foreign
		if foreign.R == nil {
			foreign.R = &manufacturerR{}
		}
		foreign.R.Products = append(foreign.R.Products, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ManufacturerID == foreign.ID {
				local.R.Manufacturer = foreign
				if foreign.R == nil {
					foreign.R = &manufacturerR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadMaterial allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadMaterial(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.MaterialID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MaterialID) {
					continue Outer
				}
			}

			args = append(args, obj.MaterialID)
		}
	}

	query := NewQuery(qm.From(`materials`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Material")
	}

	var resultSlice []*Material
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Material")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for materials")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for materials")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Material = foreign
		if foreign.R == nil {
			foreign.R = &materialR{}
		}
		foreign.R.Products = append(foreign.R.Products, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MaterialID, foreign.ID) {
				local.R.Material = foreign
				if foreign.R == nil {
					foreign.R = &materialR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadPricelist allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadPricelist(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.PricelistID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.PricelistID {
					continue Outer
				}
			}

			args = append(args, obj.PricelistID)
		}
	}

	query := NewQuery(qm.From(`pricelists`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pricelist")
	}

	var resultSlice []*Pricelist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pricelist")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pricelists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pricelists")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pricelist = foreign
		if foreign.R == nil {
			foreign.R = &pricelistR{}
		}
		foreign.R.Products = append(foreign.R.Products, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PricelistID == foreign.ID {
				local.R.Pricelist = foreign
				if foreign.R == nil {
					foreign.R = &pricelistR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadSubcategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadSubcategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.SubcategoryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SubcategoryID) {
					continue Outer
				}
			}

			args = append(args, obj.SubcategoryID)
		}
	}

	query := NewQuery(qm.From(`subcategories`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subcategory")
	}

	var resultSlice []*Subcategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subcategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subcategories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subcategories")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subcategory = foreign
		if foreign.R == nil {
			foreign.R = &subcategoryR{}
		}
		foreign.R.Products = append(foreign.R.Products, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubcategoryID, foreign.ID) {
				local.R.Subcategory = foreign
				if foreign.R == nil {
					foreign.R = &subcategoryR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadDescriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadDescriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`descriptions`), qm.WhereIn(`product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load descriptions")
	}

	var resultSlice []*Description
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice descriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on descriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for descriptions")
	}

	if len(descriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Descriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &descriptionR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductID {
				local.R.Descriptions = append(local.R.Descriptions, foreign)
				if foreign.R == nil {
					foreign.R = &descriptionR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadOffers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadOffers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`offers`), qm.WhereIn(`product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load offers")
	}

	var resultSlice []*Offer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice offers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on offers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offers")
	}

	if len(offerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Offers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &offerR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.Offers = append(local.R.Offers, foreign)
				if foreign.R == nil {
					foreign.R = &offerR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// SetCategory of the product to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Products.
func (o *Product) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `products` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
		strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.ID
	if o.R == nil {
		o.R = &productR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// SetCurrency of the product to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.Products.
func (o *Product) SetCurrency(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `products` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"currency_id"}),
		strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurrencyID = related.ID
	if o.R == nil {
		o.R = &productR{
			Currency: related,
		}
	} else {
		o.R.Currency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// SetManufacturer of the product to the related item.
// Sets o.R.Manufacturer to related.
// Adds o to related.R.Products.
func (o *Product) SetManufacturer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Manufacturer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `products` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"manufacturer_id"}),
		strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ManufacturerID = related.ID
	if o.R == nil {
		o.R = &productR{
			Manufacturer: related,
		}
	} else {
		o.R.Manufacturer = related
	}

	if related.R == nil {
		related.R = &manufacturerR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// SetMaterial of the product to the related item.
// Sets o.R.Material to related.
// Adds o to related.R.Products.
func (o *Product) SetMaterial(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Material) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `products` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"material_id"}),
		strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MaterialID, related.ID)
	if o.R == nil {
		o.R = &productR{
			Material: related,
		}
	} else {
		o.R.Material = related
	}

	if related.R == nil {
		related.R = &materialR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// RemoveMaterial relationship.
// Sets o.R.Material to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Product) RemoveMaterial(ctx context.Context, exec boil.ContextExecutor, related *Material) error {
	var err error

	queries.SetScanner(&o.MaterialID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("material_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Material = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Products {
		if queries.Equal(o.MaterialID, ri.MaterialID) {
			continue
		}

		ln := len(related.R.Products)
		if ln > 1 && i < ln-1 {
			related.R.Products[i] = related.R.Products[ln-1]
		}
		related.R.Products = related.R.Products[:ln-1]
		break
	}
	return nil
}

// SetPricelist of the product to the related item.
// Sets o.R.Pricelist to related.
// Adds o to related.R.Products.
func (o *Product) SetPricelist(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pricelist) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `products` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"pricelist_id"}),
		strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PricelistID = related.ID
	if o.R == nil {
		o.R = &productR{
			Pricelist: related,
		}
	} else {
		o.R.Pricelist = related
	}

	if related.R == nil {
		related.R = &pricelistR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// SetSubcategory of the product to the related item.
// Sets o.R.Subcategory to related.
// Adds o to related.R.Products.
func (o *Product) SetSubcategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Subcategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `products` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"subcategory_id"}),
		strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubcategoryID, related.ID)
	if o.R == nil {
		o.R = &productR{
			Subcategory: related,
		}
	} else {
		o.R.Subcategory = related
	}

	if related.R == nil {
		related.R = &subcategoryR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// RemoveSubcategory relationship.
// Sets o.R.Subcategory to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Product) RemoveSubcategory(ctx context.Context, exec boil.ContextExecutor, related *Subcategory) error {
	var err error

	queries.SetScanner(&o.SubcategoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("subcategory_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Subcategory = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Products {
		if queries.Equal(o.SubcategoryID, ri.SubcategoryID) {
			continue
		}

		ln := len(related.R.Products)
		if ln > 1 && i < ln-1 {
			related.R.Products[i] = related.R.Products[ln-1]
		}
		related.R.Products = related.R.Products[:ln-1]
		break
	}
	return nil
}

// AddDescriptions adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Descriptions.
// Sets related.R.Product appropriately.
func (o *Product) AddDescriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Description) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `descriptions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, descriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productR{
			Descriptions: related,
		}
	} else {
		o.R.Descriptions = append(o.R.Descriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &descriptionR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// AddOffers adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Offers.
// Sets related.R.Product appropriately.
func (o *Product) AddOffers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Offer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `offers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, offerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			Offers: related,
		}
	} else {
		o.R.Offers = append(o.R.Offers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &offerR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetOffers removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's Offers accordingly.
// Replaces o.R.Offers with related.
// Sets related.R.Product's Offers accordingly.
func (o *Product) SetOffers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Offer) error {
	query := "update `offers` set `product_id` = null where `product_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Offers {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.Offers = nil
	}
	return o.AddOffers(ctx, exec, insert, related...)
}

// RemoveOffers relationships from objects passed in.
// Removes related items from R.Offers (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *Product) RemoveOffers(ctx context.Context, exec boil.ContextExecutor, related ...*Offer) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Offers {
			if rel != ri {
				continue
			}

			ln := len(o.R.Offers)
			if ln > 1 && i < ln-1 {
				o.R.Offers[i] = o.R.Offers[ln-1]
			}
			o.R.Offers = o.R.Offers[:ln-1]
			break
		}
	}

	return nil
}

// Products retrieves all the records using an executor.
func Products(mods ...qm.QueryMod) productQuery {
	mods = append(mods, qm.From("`products`"))
	return productQuery{NewQuery(mods...)}
}

// FindProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProduct(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Product, error) {
	productObj := &Product{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `products` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from products")
	}

	return productObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Product) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no products provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productInsertCacheMut.RLock()
	cache, cached := productInsertCache[key]
	productInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productType, productMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `products` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `products` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `products` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into products")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == productMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for products")
	}

CacheNoHooks:
	if !cached {
		productInsertCacheMut.Lock()
		productInsertCache[key] = cache
		productInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Product.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Product) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productUpdateCacheMut.RLock()
	cache, cached := productUpdateCache[key]
	productUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productColumns,
			productPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `products` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productType, productMapping, append(wl, productPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for products")
	}

	if !cached {
		productUpdateCacheMut.Lock()
		productUpdateCache[key] = cache
		productUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `products` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all product")
	}
	return rowsAff, nil
}

var mySQLProductUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Product) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no products provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLProductUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productUpsertCacheMut.RLock()
	cache, cached := productUpsertCache[key]
	productUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productColumns,
			productPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert products, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "products", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `products` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productType, productMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for products")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == productMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(productType, productMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for products")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for products")
	}

CacheNoHooks:
	if !cached {
		productUpsertCacheMut.Lock()
		productUpsertCache[key] = cache
		productUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Product record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Product) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Product provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productPrimaryKeyMapping)
	sql := "DELETE FROM `products` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Product slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(productBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `products` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for products")
	}

	if len(productAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Product) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `products`.* FROM `products` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductSlice")
	}

	*o = slice

	return nil
}

// ProductExists checks if the Product row exists.
func ProductExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `products` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if products exists")
	}

	return exists, nil
}
