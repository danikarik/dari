// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRegistryFieldStats(t *testing.T) {
	t.Parallel()

	query := RegistryFieldStats()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRegistryFieldStatsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistryFieldStatsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RegistryFieldStats().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistryFieldStatsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegistryFieldStatSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistryFieldStatsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RegistryFieldStatExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RegistryFieldStat exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RegistryFieldStatExists to return true, but got false.")
	}
}

func testRegistryFieldStatsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	registryFieldStatFound, err := FindRegistryFieldStat(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if registryFieldStatFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRegistryFieldStatsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RegistryFieldStats().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRegistryFieldStatsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RegistryFieldStats().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRegistryFieldStatsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	registryFieldStatOne := &RegistryFieldStat{}
	registryFieldStatTwo := &RegistryFieldStat{}
	if err = randomize.Struct(seed, registryFieldStatOne, registryFieldStatDBTypes, false, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}
	if err = randomize.Struct(seed, registryFieldStatTwo, registryFieldStatDBTypes, false, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = registryFieldStatOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = registryFieldStatTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RegistryFieldStats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRegistryFieldStatsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	registryFieldStatOne := &RegistryFieldStat{}
	registryFieldStatTwo := &RegistryFieldStat{}
	if err = randomize.Struct(seed, registryFieldStatOne, registryFieldStatDBTypes, false, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}
	if err = randomize.Struct(seed, registryFieldStatTwo, registryFieldStatDBTypes, false, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = registryFieldStatOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = registryFieldStatTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func registryFieldStatBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RegistryFieldStat) error {
	*o = RegistryFieldStat{}
	return nil
}

func registryFieldStatAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RegistryFieldStat) error {
	*o = RegistryFieldStat{}
	return nil
}

func registryFieldStatAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RegistryFieldStat) error {
	*o = RegistryFieldStat{}
	return nil
}

func registryFieldStatBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RegistryFieldStat) error {
	*o = RegistryFieldStat{}
	return nil
}

func registryFieldStatAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RegistryFieldStat) error {
	*o = RegistryFieldStat{}
	return nil
}

func registryFieldStatBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RegistryFieldStat) error {
	*o = RegistryFieldStat{}
	return nil
}

func registryFieldStatAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RegistryFieldStat) error {
	*o = RegistryFieldStat{}
	return nil
}

func registryFieldStatBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RegistryFieldStat) error {
	*o = RegistryFieldStat{}
	return nil
}

func registryFieldStatAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RegistryFieldStat) error {
	*o = RegistryFieldStat{}
	return nil
}

func testRegistryFieldStatsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RegistryFieldStat{}
	o := &RegistryFieldStat{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat object: %s", err)
	}

	AddRegistryFieldStatHook(boil.BeforeInsertHook, registryFieldStatBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	registryFieldStatBeforeInsertHooks = []RegistryFieldStatHook{}

	AddRegistryFieldStatHook(boil.AfterInsertHook, registryFieldStatAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	registryFieldStatAfterInsertHooks = []RegistryFieldStatHook{}

	AddRegistryFieldStatHook(boil.AfterSelectHook, registryFieldStatAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	registryFieldStatAfterSelectHooks = []RegistryFieldStatHook{}

	AddRegistryFieldStatHook(boil.BeforeUpdateHook, registryFieldStatBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	registryFieldStatBeforeUpdateHooks = []RegistryFieldStatHook{}

	AddRegistryFieldStatHook(boil.AfterUpdateHook, registryFieldStatAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	registryFieldStatAfterUpdateHooks = []RegistryFieldStatHook{}

	AddRegistryFieldStatHook(boil.BeforeDeleteHook, registryFieldStatBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	registryFieldStatBeforeDeleteHooks = []RegistryFieldStatHook{}

	AddRegistryFieldStatHook(boil.AfterDeleteHook, registryFieldStatAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	registryFieldStatAfterDeleteHooks = []RegistryFieldStatHook{}

	AddRegistryFieldStatHook(boil.BeforeUpsertHook, registryFieldStatBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	registryFieldStatBeforeUpsertHooks = []RegistryFieldStatHook{}

	AddRegistryFieldStatHook(boil.AfterUpsertHook, registryFieldStatAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	registryFieldStatAfterUpsertHooks = []RegistryFieldStatHook{}
}

func testRegistryFieldStatsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegistryFieldStatsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(registryFieldStatColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegistryFieldStatToOneRegistryUsingRegistry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RegistryFieldStat
	var foreign Registry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RegistryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Registry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RegistryFieldStatSlice{&local}
	if err = local.L.LoadRegistry(ctx, tx, false, (*[]*RegistryFieldStat)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Registry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Registry = nil
	if err = local.L.LoadRegistry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Registry == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRegistryFieldStatToOneRegistryJournalUsingRegistryJournal(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RegistryFieldStat
	var foreign RegistryJournal

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, registryFieldStatDBTypes, false, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, registryJournalDBTypes, false, registryJournalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryJournal struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RegistryJournalID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RegistryJournal().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RegistryFieldStatSlice{&local}
	if err = local.L.LoadRegistryJournal(ctx, tx, false, (*[]*RegistryFieldStat)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RegistryJournal == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RegistryJournal = nil
	if err = local.L.LoadRegistryJournal(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RegistryJournal == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRegistryFieldStatToOneSetOpRegistryUsingRegistry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RegistryFieldStat
	var b, c Registry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryFieldStatDBTypes, false, strmangle.SetComplement(registryFieldStatPrimaryKeyColumns, registryFieldStatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Registry{&b, &c} {
		err = a.SetRegistry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Registry != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RegistryFieldStats[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RegistryID, x.ID) {
			t.Error("foreign key was wrong value", a.RegistryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RegistryID))
		reflect.Indirect(reflect.ValueOf(&a.RegistryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RegistryID, x.ID) {
			t.Error("foreign key was wrong value", a.RegistryID, x.ID)
		}
	}
}

func testRegistryFieldStatToOneRemoveOpRegistryUsingRegistry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RegistryFieldStat
	var b Registry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryFieldStatDBTypes, false, strmangle.SetComplement(registryFieldStatPrimaryKeyColumns, registryFieldStatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRegistry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRegistry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Registry().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Registry != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RegistryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RegistryFieldStats) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRegistryFieldStatToOneSetOpRegistryJournalUsingRegistryJournal(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RegistryFieldStat
	var b, c RegistryJournal

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryFieldStatDBTypes, false, strmangle.SetComplement(registryFieldStatPrimaryKeyColumns, registryFieldStatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, registryJournalDBTypes, false, strmangle.SetComplement(registryJournalPrimaryKeyColumns, registryJournalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, registryJournalDBTypes, false, strmangle.SetComplement(registryJournalPrimaryKeyColumns, registryJournalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RegistryJournal{&b, &c} {
		err = a.SetRegistryJournal(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RegistryJournal != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RegistryFieldStats[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RegistryJournalID != x.ID {
			t.Error("foreign key was wrong value", a.RegistryJournalID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RegistryJournalID))
		reflect.Indirect(reflect.ValueOf(&a.RegistryJournalID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RegistryJournalID != x.ID {
			t.Error("foreign key was wrong value", a.RegistryJournalID, x.ID)
		}
	}
}

func testRegistryFieldStatsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegistryFieldStatsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegistryFieldStatSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegistryFieldStatsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RegistryFieldStats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	registryFieldStatDBTypes = map[string]string{`CreatedAt`: `timestamp`, `ErrorMSG`: `text`, `ID`: `int`, `Label`: `varchar`, `NewValue`: `varchar`, `OldValue`: `varchar`, `RegistryID`: `int`, `RegistryJournalID`: `int`, `UpdatedAt`: `timestamp`}
	_                        = bytes.MinRead
)

func testRegistryFieldStatsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(registryFieldStatPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(registryFieldStatColumns) == len(registryFieldStatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRegistryFieldStatsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(registryFieldStatColumns) == len(registryFieldStatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RegistryFieldStat{}
	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, registryFieldStatDBTypes, true, registryFieldStatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(registryFieldStatColumns, registryFieldStatPrimaryKeyColumns) {
		fields = registryFieldStatColumns
	} else {
		fields = strmangle.SetComplement(
			registryFieldStatColumns,
			registryFieldStatPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RegistryFieldStatSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRegistryFieldStatsUpsert(t *testing.T) {
	t.Parallel()

	if len(registryFieldStatColumns) == len(registryFieldStatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRegistryFieldStatUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RegistryFieldStat{}
	if err = randomize.Struct(seed, &o, registryFieldStatDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RegistryFieldStat: %s", err)
	}

	count, err := RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, registryFieldStatDBTypes, false, registryFieldStatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RegistryFieldStat struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RegistryFieldStat: %s", err)
	}

	count, err = RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
