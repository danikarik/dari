// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRegistryBuilds(t *testing.T) {
	t.Parallel()

	query := RegistryBuilds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRegistryBuildsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RegistryBuilds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistryBuildsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RegistryBuilds().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RegistryBuilds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistryBuildsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegistryBuildSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RegistryBuilds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistryBuildsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RegistryBuildExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RegistryBuild exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RegistryBuildExists to return true, but got false.")
	}
}

func testRegistryBuildsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	registryBuildFound, err := FindRegistryBuild(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if registryBuildFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRegistryBuildsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RegistryBuilds().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRegistryBuildsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RegistryBuilds().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRegistryBuildsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	registryBuildOne := &RegistryBuild{}
	registryBuildTwo := &RegistryBuild{}
	if err = randomize.Struct(seed, registryBuildOne, registryBuildDBTypes, false, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}
	if err = randomize.Struct(seed, registryBuildTwo, registryBuildDBTypes, false, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = registryBuildOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = registryBuildTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RegistryBuilds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRegistryBuildsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	registryBuildOne := &RegistryBuild{}
	registryBuildTwo := &RegistryBuild{}
	if err = randomize.Struct(seed, registryBuildOne, registryBuildDBTypes, false, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}
	if err = randomize.Struct(seed, registryBuildTwo, registryBuildDBTypes, false, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = registryBuildOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = registryBuildTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegistryBuilds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func registryBuildBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RegistryBuild) error {
	*o = RegistryBuild{}
	return nil
}

func registryBuildAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RegistryBuild) error {
	*o = RegistryBuild{}
	return nil
}

func registryBuildAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RegistryBuild) error {
	*o = RegistryBuild{}
	return nil
}

func registryBuildBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RegistryBuild) error {
	*o = RegistryBuild{}
	return nil
}

func registryBuildAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RegistryBuild) error {
	*o = RegistryBuild{}
	return nil
}

func registryBuildBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RegistryBuild) error {
	*o = RegistryBuild{}
	return nil
}

func registryBuildAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RegistryBuild) error {
	*o = RegistryBuild{}
	return nil
}

func registryBuildBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RegistryBuild) error {
	*o = RegistryBuild{}
	return nil
}

func registryBuildAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RegistryBuild) error {
	*o = RegistryBuild{}
	return nil
}

func testRegistryBuildsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RegistryBuild{}
	o := &RegistryBuild{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, registryBuildDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RegistryBuild object: %s", err)
	}

	AddRegistryBuildHook(boil.BeforeInsertHook, registryBuildBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	registryBuildBeforeInsertHooks = []RegistryBuildHook{}

	AddRegistryBuildHook(boil.AfterInsertHook, registryBuildAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	registryBuildAfterInsertHooks = []RegistryBuildHook{}

	AddRegistryBuildHook(boil.AfterSelectHook, registryBuildAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	registryBuildAfterSelectHooks = []RegistryBuildHook{}

	AddRegistryBuildHook(boil.BeforeUpdateHook, registryBuildBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	registryBuildBeforeUpdateHooks = []RegistryBuildHook{}

	AddRegistryBuildHook(boil.AfterUpdateHook, registryBuildAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	registryBuildAfterUpdateHooks = []RegistryBuildHook{}

	AddRegistryBuildHook(boil.BeforeDeleteHook, registryBuildBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	registryBuildBeforeDeleteHooks = []RegistryBuildHook{}

	AddRegistryBuildHook(boil.AfterDeleteHook, registryBuildAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	registryBuildAfterDeleteHooks = []RegistryBuildHook{}

	AddRegistryBuildHook(boil.BeforeUpsertHook, registryBuildBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	registryBuildBeforeUpsertHooks = []RegistryBuildHook{}

	AddRegistryBuildHook(boil.AfterUpsertHook, registryBuildAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	registryBuildAfterUpsertHooks = []RegistryBuildHook{}
}

func testRegistryBuildsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegistryBuilds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegistryBuildsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(registryBuildColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RegistryBuilds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegistryBuildToOneRegistryUsingRegistry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RegistryBuild
	var foreign Registry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, registryBuildDBTypes, false, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RegistryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Registry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RegistryBuildSlice{&local}
	if err = local.L.LoadRegistry(ctx, tx, false, (*[]*RegistryBuild)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Registry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Registry = nil
	if err = local.L.LoadRegistry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Registry == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRegistryBuildToOneSetOpRegistryUsingRegistry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RegistryBuild
	var b, c Registry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryBuildDBTypes, false, strmangle.SetComplement(registryBuildPrimaryKeyColumns, registryBuildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Registry{&b, &c} {
		err = a.SetRegistry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Registry != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RegistryBuilds[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RegistryID != x.ID {
			t.Error("foreign key was wrong value", a.RegistryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RegistryID))
		reflect.Indirect(reflect.ValueOf(&a.RegistryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RegistryID != x.ID {
			t.Error("foreign key was wrong value", a.RegistryID, x.ID)
		}
	}
}

func testRegistryBuildsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegistryBuildsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegistryBuildSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegistryBuildsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RegistryBuilds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	registryBuildDBTypes = map[string]string{`CreatedAt`: `timestamp`, `ID`: `int`, `Model`: `varchar`, `Order`: `int`, `RegistryID`: `int`, `Title`: `varchar`, `UpdatedAt`: `timestamp`}
	_                    = bytes.MinRead
)

func testRegistryBuildsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(registryBuildPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(registryBuildColumns) == len(registryBuildPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegistryBuilds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRegistryBuildsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(registryBuildColumns) == len(registryBuildPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RegistryBuild{}
	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegistryBuilds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, registryBuildDBTypes, true, registryBuildPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(registryBuildColumns, registryBuildPrimaryKeyColumns) {
		fields = registryBuildColumns
	} else {
		fields = strmangle.SetComplement(
			registryBuildColumns,
			registryBuildPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RegistryBuildSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRegistryBuildsUpsert(t *testing.T) {
	t.Parallel()

	if len(registryBuildColumns) == len(registryBuildPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRegistryBuildUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RegistryBuild{}
	if err = randomize.Struct(seed, &o, registryBuildDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RegistryBuild: %s", err)
	}

	count, err := RegistryBuilds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, registryBuildDBTypes, false, registryBuildPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RegistryBuild struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RegistryBuild: %s", err)
	}

	count, err = RegistryBuilds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
