// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RegistryJournal is an object representing the database table.
type RegistryJournal struct {
	ID                 uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID             null.Uint `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	TotalCount         uint      `boil:"total_count" json:"total_count" toml:"total_count" yaml:"total_count"`
	FailedCount        uint      `boil:"failed_count" json:"failed_count" toml:"failed_count" yaml:"failed_count"`
	DoubleVisitedCount uint      `boil:"double_visited_count" json:"double_visited_count" toml:"double_visited_count" yaml:"double_visited_count"`
	InsertedCount      uint      `boil:"inserted_count" json:"inserted_count" toml:"inserted_count" yaml:"inserted_count"`
	UpdatedCount       uint      `boil:"updated_count" json:"updated_count" toml:"updated_count" yaml:"updated_count"`
	DeletedCount       uint      `boil:"deleted_count" json:"deleted_count" toml:"deleted_count" yaml:"deleted_count"`
	ProcessStatusID    uint      `boil:"process_status_id" json:"process_status_id" toml:"process_status_id" yaml:"process_status_id"`
	StartedAt          time.Time `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	FinishedAt         null.Time `boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at" yaml:"finished_at,omitempty"`

	R *registryJournalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L registryJournalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RegistryJournalColumns = struct {
	ID                 string
	UserID             string
	TotalCount         string
	FailedCount        string
	DoubleVisitedCount string
	InsertedCount      string
	UpdatedCount       string
	DeletedCount       string
	ProcessStatusID    string
	StartedAt          string
	FinishedAt         string
}{
	ID:                 "id",
	UserID:             "user_id",
	TotalCount:         "total_count",
	FailedCount:        "failed_count",
	DoubleVisitedCount: "double_visited_count",
	InsertedCount:      "inserted_count",
	UpdatedCount:       "updated_count",
	DeletedCount:       "deleted_count",
	ProcessStatusID:    "process_status_id",
	StartedAt:          "started_at",
	FinishedAt:         "finished_at",
}

// RegistryJournalRels is where relationship names are stored.
var RegistryJournalRels = struct {
	ProcessStatus      string
	User               string
	RegistryFieldStats string
}{
	ProcessStatus:      "ProcessStatus",
	User:               "User",
	RegistryFieldStats: "RegistryFieldStats",
}

// registryJournalR is where relationships are stored.
type registryJournalR struct {
	ProcessStatus      *ProcessStatus
	User               *User
	RegistryFieldStats RegistryFieldStatSlice
}

// NewStruct creates a new relationship struct
func (*registryJournalR) NewStruct() *registryJournalR {
	return &registryJournalR{}
}

// registryJournalL is where Load methods for each relationship are stored.
type registryJournalL struct{}

var (
	registryJournalColumns               = []string{"id", "user_id", "total_count", "failed_count", "double_visited_count", "inserted_count", "updated_count", "deleted_count", "process_status_id", "started_at", "finished_at"}
	registryJournalColumnsWithoutDefault = []string{"user_id", "process_status_id", "finished_at"}
	registryJournalColumnsWithDefault    = []string{"id", "total_count", "failed_count", "double_visited_count", "inserted_count", "updated_count", "deleted_count", "started_at"}
	registryJournalPrimaryKeyColumns     = []string{"id"}
)

type (
	// RegistryJournalSlice is an alias for a slice of pointers to RegistryJournal.
	// This should generally be used opposed to []RegistryJournal.
	RegistryJournalSlice []*RegistryJournal
	// RegistryJournalHook is the signature for custom RegistryJournal hook methods
	RegistryJournalHook func(context.Context, boil.ContextExecutor, *RegistryJournal) error

	registryJournalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	registryJournalType                 = reflect.TypeOf(&RegistryJournal{})
	registryJournalMapping              = queries.MakeStructMapping(registryJournalType)
	registryJournalPrimaryKeyMapping, _ = queries.BindMapping(registryJournalType, registryJournalMapping, registryJournalPrimaryKeyColumns)
	registryJournalInsertCacheMut       sync.RWMutex
	registryJournalInsertCache          = make(map[string]insertCache)
	registryJournalUpdateCacheMut       sync.RWMutex
	registryJournalUpdateCache          = make(map[string]updateCache)
	registryJournalUpsertCacheMut       sync.RWMutex
	registryJournalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var registryJournalBeforeInsertHooks []RegistryJournalHook
var registryJournalBeforeUpdateHooks []RegistryJournalHook
var registryJournalBeforeDeleteHooks []RegistryJournalHook
var registryJournalBeforeUpsertHooks []RegistryJournalHook

var registryJournalAfterInsertHooks []RegistryJournalHook
var registryJournalAfterSelectHooks []RegistryJournalHook
var registryJournalAfterUpdateHooks []RegistryJournalHook
var registryJournalAfterDeleteHooks []RegistryJournalHook
var registryJournalAfterUpsertHooks []RegistryJournalHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RegistryJournal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryJournalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RegistryJournal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryJournalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RegistryJournal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryJournalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RegistryJournal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryJournalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RegistryJournal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryJournalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RegistryJournal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryJournalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RegistryJournal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryJournalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RegistryJournal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryJournalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RegistryJournal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryJournalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRegistryJournalHook registers your hook function for all future operations.
func AddRegistryJournalHook(hookPoint boil.HookPoint, registryJournalHook RegistryJournalHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		registryJournalBeforeInsertHooks = append(registryJournalBeforeInsertHooks, registryJournalHook)
	case boil.BeforeUpdateHook:
		registryJournalBeforeUpdateHooks = append(registryJournalBeforeUpdateHooks, registryJournalHook)
	case boil.BeforeDeleteHook:
		registryJournalBeforeDeleteHooks = append(registryJournalBeforeDeleteHooks, registryJournalHook)
	case boil.BeforeUpsertHook:
		registryJournalBeforeUpsertHooks = append(registryJournalBeforeUpsertHooks, registryJournalHook)
	case boil.AfterInsertHook:
		registryJournalAfterInsertHooks = append(registryJournalAfterInsertHooks, registryJournalHook)
	case boil.AfterSelectHook:
		registryJournalAfterSelectHooks = append(registryJournalAfterSelectHooks, registryJournalHook)
	case boil.AfterUpdateHook:
		registryJournalAfterUpdateHooks = append(registryJournalAfterUpdateHooks, registryJournalHook)
	case boil.AfterDeleteHook:
		registryJournalAfterDeleteHooks = append(registryJournalAfterDeleteHooks, registryJournalHook)
	case boil.AfterUpsertHook:
		registryJournalAfterUpsertHooks = append(registryJournalAfterUpsertHooks, registryJournalHook)
	}
}

// One returns a single registryJournal record from the query.
func (q registryJournalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RegistryJournal, error) {
	o := &RegistryJournal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for registry_journals")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RegistryJournal records from the query.
func (q registryJournalQuery) All(ctx context.Context, exec boil.ContextExecutor) (RegistryJournalSlice, error) {
	var o []*RegistryJournal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RegistryJournal slice")
	}

	if len(registryJournalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RegistryJournal records in the query.
func (q registryJournalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count registry_journals rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q registryJournalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if registry_journals exists")
	}

	return count > 0, nil
}

// ProcessStatus pointed to by the foreign key.
func (o *RegistryJournal) ProcessStatus(mods ...qm.QueryMod) processStatusQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProcessStatusID),
	}

	queryMods = append(queryMods, mods...)

	query := ProcessStatuses(queryMods...)
	queries.SetFrom(query.Query, "`process_statuses`")

	return query
}

// User pointed to by the foreign key.
func (o *RegistryJournal) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// RegistryFieldStats retrieves all the registry_field_stat's RegistryFieldStats with an executor.
func (o *RegistryJournal) RegistryFieldStats(mods ...qm.QueryMod) registryFieldStatQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`registry_field_stats`.`registry_journal_id`=?", o.ID),
	)

	query := RegistryFieldStats(queryMods...)
	queries.SetFrom(query.Query, "`registry_field_stats`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`registry_field_stats`.*"})
	}

	return query
}

// LoadProcessStatus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (registryJournalL) LoadProcessStatus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegistryJournal interface{}, mods queries.Applicator) error {
	var slice []*RegistryJournal
	var object *RegistryJournal

	if singular {
		object = maybeRegistryJournal.(*RegistryJournal)
	} else {
		slice = *maybeRegistryJournal.(*[]*RegistryJournal)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registryJournalR{}
		}
		args = append(args, object.ProcessStatusID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registryJournalR{}
			}

			for _, a := range args {
				if a == obj.ProcessStatusID {
					continue Outer
				}
			}

			args = append(args, obj.ProcessStatusID)
		}
	}

	query := NewQuery(qm.From(`process_statuses`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProcessStatus")
	}

	var resultSlice []*ProcessStatus
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProcessStatus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for process_statuses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for process_statuses")
	}

	if len(registryJournalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProcessStatus = foreign
		if foreign.R == nil {
			foreign.R = &processStatusR{}
		}
		foreign.R.RegistryJournals = append(foreign.R.RegistryJournals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProcessStatusID == foreign.ID {
				local.R.ProcessStatus = foreign
				if foreign.R == nil {
					foreign.R = &processStatusR{}
				}
				foreign.R.RegistryJournals = append(foreign.R.RegistryJournals, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (registryJournalL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegistryJournal interface{}, mods queries.Applicator) error {
	var slice []*RegistryJournal
	var object *RegistryJournal

	if singular {
		object = maybeRegistryJournal.(*RegistryJournal)
	} else {
		slice = *maybeRegistryJournal.(*[]*RegistryJournal)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registryJournalR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registryJournalR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(registryJournalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.RegistryJournals = append(foreign.R.RegistryJournals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RegistryJournals = append(foreign.R.RegistryJournals, local)
				break
			}
		}
	}

	return nil
}

// LoadRegistryFieldStats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (registryJournalL) LoadRegistryFieldStats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegistryJournal interface{}, mods queries.Applicator) error {
	var slice []*RegistryJournal
	var object *RegistryJournal

	if singular {
		object = maybeRegistryJournal.(*RegistryJournal)
	} else {
		slice = *maybeRegistryJournal.(*[]*RegistryJournal)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registryJournalR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registryJournalR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`registry_field_stats`), qm.WhereIn(`registry_journal_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load registry_field_stats")
	}

	var resultSlice []*RegistryFieldStat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice registry_field_stats")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on registry_field_stats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for registry_field_stats")
	}

	if len(registryFieldStatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RegistryFieldStats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &registryFieldStatR{}
			}
			foreign.R.RegistryJournal = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RegistryJournalID {
				local.R.RegistryFieldStats = append(local.R.RegistryFieldStats, foreign)
				if foreign.R == nil {
					foreign.R = &registryFieldStatR{}
				}
				foreign.R.RegistryJournal = local
				break
			}
		}
	}

	return nil
}

// SetProcessStatus of the registryJournal to the related item.
// Sets o.R.ProcessStatus to related.
// Adds o to related.R.RegistryJournals.
func (o *RegistryJournal) SetProcessStatus(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProcessStatus) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `registry_journals` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"process_status_id"}),
		strmangle.WhereClause("`", "`", 0, registryJournalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProcessStatusID = related.ID
	if o.R == nil {
		o.R = &registryJournalR{
			ProcessStatus: related,
		}
	} else {
		o.R.ProcessStatus = related
	}

	if related.R == nil {
		related.R = &processStatusR{
			RegistryJournals: RegistryJournalSlice{o},
		}
	} else {
		related.R.RegistryJournals = append(related.R.RegistryJournals, o)
	}

	return nil
}

// SetUser of the registryJournal to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RegistryJournals.
func (o *RegistryJournal) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `registry_journals` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, registryJournalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &registryJournalR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			RegistryJournals: RegistryJournalSlice{o},
		}
	} else {
		related.R.RegistryJournals = append(related.R.RegistryJournals, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RegistryJournal) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.User = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RegistryJournals {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.RegistryJournals)
		if ln > 1 && i < ln-1 {
			related.R.RegistryJournals[i] = related.R.RegistryJournals[ln-1]
		}
		related.R.RegistryJournals = related.R.RegistryJournals[:ln-1]
		break
	}
	return nil
}

// AddRegistryFieldStats adds the given related objects to the existing relationships
// of the registry_journal, optionally inserting them as new records.
// Appends related to o.R.RegistryFieldStats.
// Sets related.R.RegistryJournal appropriately.
func (o *RegistryJournal) AddRegistryFieldStats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RegistryFieldStat) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RegistryJournalID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `registry_field_stats` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"registry_journal_id"}),
				strmangle.WhereClause("`", "`", 0, registryFieldStatPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RegistryJournalID = o.ID
		}
	}

	if o.R == nil {
		o.R = &registryJournalR{
			RegistryFieldStats: related,
		}
	} else {
		o.R.RegistryFieldStats = append(o.R.RegistryFieldStats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &registryFieldStatR{
				RegistryJournal: o,
			}
		} else {
			rel.R.RegistryJournal = o
		}
	}
	return nil
}

// RegistryJournals retrieves all the records using an executor.
func RegistryJournals(mods ...qm.QueryMod) registryJournalQuery {
	mods = append(mods, qm.From("`registry_journals`"))
	return registryJournalQuery{NewQuery(mods...)}
}

// FindRegistryJournal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRegistryJournal(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*RegistryJournal, error) {
	registryJournalObj := &RegistryJournal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `registry_journals` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, registryJournalObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from registry_journals")
	}

	return registryJournalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RegistryJournal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no registry_journals provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(registryJournalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	registryJournalInsertCacheMut.RLock()
	cache, cached := registryJournalInsertCache[key]
	registryJournalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			registryJournalColumns,
			registryJournalColumnsWithDefault,
			registryJournalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(registryJournalType, registryJournalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(registryJournalType, registryJournalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `registry_journals` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `registry_journals` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `registry_journals` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, registryJournalPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into registry_journals")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == registryJournalMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for registry_journals")
	}

CacheNoHooks:
	if !cached {
		registryJournalInsertCacheMut.Lock()
		registryJournalInsertCache[key] = cache
		registryJournalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RegistryJournal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RegistryJournal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	registryJournalUpdateCacheMut.RLock()
	cache, cached := registryJournalUpdateCache[key]
	registryJournalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			registryJournalColumns,
			registryJournalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update registry_journals, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `registry_journals` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, registryJournalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(registryJournalType, registryJournalMapping, append(wl, registryJournalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update registry_journals row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for registry_journals")
	}

	if !cached {
		registryJournalUpdateCacheMut.Lock()
		registryJournalUpdateCache[key] = cache
		registryJournalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q registryJournalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for registry_journals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for registry_journals")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RegistryJournalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registryJournalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `registry_journals` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registryJournalPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in registryJournal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all registryJournal")
	}
	return rowsAff, nil
}

var mySQLRegistryJournalUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RegistryJournal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no registry_journals provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(registryJournalColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRegistryJournalUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	registryJournalUpsertCacheMut.RLock()
	cache, cached := registryJournalUpsertCache[key]
	registryJournalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			registryJournalColumns,
			registryJournalColumnsWithDefault,
			registryJournalColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			registryJournalColumns,
			registryJournalPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert registry_journals, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "registry_journals", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `registry_journals` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(registryJournalType, registryJournalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(registryJournalType, registryJournalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for registry_journals")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == registryJournalMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(registryJournalType, registryJournalMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for registry_journals")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for registry_journals")
	}

CacheNoHooks:
	if !cached {
		registryJournalUpsertCacheMut.Lock()
		registryJournalUpsertCache[key] = cache
		registryJournalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RegistryJournal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RegistryJournal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RegistryJournal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), registryJournalPrimaryKeyMapping)
	sql := "DELETE FROM `registry_journals` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from registry_journals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for registry_journals")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q registryJournalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no registryJournalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from registry_journals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for registry_journals")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RegistryJournalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RegistryJournal slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(registryJournalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registryJournalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `registry_journals` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registryJournalPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from registryJournal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for registry_journals")
	}

	if len(registryJournalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RegistryJournal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRegistryJournal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RegistryJournalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RegistryJournalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registryJournalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `registry_journals`.* FROM `registry_journals` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registryJournalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RegistryJournalSlice")
	}

	*o = slice

	return nil
}

// RegistryJournalExists checks if the RegistryJournal row exists.
func RegistryJournalExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `registry_journals` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if registry_journals exists")
	}

	return exists, nil
}
