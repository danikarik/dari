// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Manufacturer is an object representing the database table.
type Manufacturer struct {
	ID         uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	BrandName  string      `boil:"brand_name" json:"brand_name" toml:"brand_name" yaml:"brand_name"`
	CountryID  uint        `boil:"country_id" json:"country_id" toml:"country_id" yaml:"country_id"`
	CurrencyID null.Uint   `boil:"currency_id" json:"currency_id,omitempty" toml:"currency_id" yaml:"currency_id,omitempty"`
	Agent      null.String `boil:"agent" json:"agent,omitempty" toml:"agent" yaml:"agent,omitempty"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *manufacturerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L manufacturerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ManufacturerColumns = struct {
	ID         string
	BrandName  string
	CountryID  string
	CurrencyID string
	Agent      string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	BrandName:  "brand_name",
	CountryID:  "country_id",
	CurrencyID: "currency_id",
	Agent:      "agent",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// ManufacturerRels is where relationship names are stored.
var ManufacturerRels = struct {
	Country    string
	Currency   string
	Discounts  string
	Pricelists string
	Products   string
}{
	Country:    "Country",
	Currency:   "Currency",
	Discounts:  "Discounts",
	Pricelists: "Pricelists",
	Products:   "Products",
}

// manufacturerR is where relationships are stored.
type manufacturerR struct {
	Country    *Country
	Currency   *Currency
	Discounts  DiscountSlice
	Pricelists PricelistSlice
	Products   ProductSlice
}

// NewStruct creates a new relationship struct
func (*manufacturerR) NewStruct() *manufacturerR {
	return &manufacturerR{}
}

// manufacturerL is where Load methods for each relationship are stored.
type manufacturerL struct{}

var (
	manufacturerColumns               = []string{"id", "brand_name", "country_id", "currency_id", "agent", "created_at", "updated_at"}
	manufacturerColumnsWithoutDefault = []string{"brand_name", "country_id", "currency_id", "agent", "created_at", "updated_at"}
	manufacturerColumnsWithDefault    = []string{"id"}
	manufacturerPrimaryKeyColumns     = []string{"id"}
)

type (
	// ManufacturerSlice is an alias for a slice of pointers to Manufacturer.
	// This should generally be used opposed to []Manufacturer.
	ManufacturerSlice []*Manufacturer
	// ManufacturerHook is the signature for custom Manufacturer hook methods
	ManufacturerHook func(context.Context, boil.ContextExecutor, *Manufacturer) error

	manufacturerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	manufacturerType                 = reflect.TypeOf(&Manufacturer{})
	manufacturerMapping              = queries.MakeStructMapping(manufacturerType)
	manufacturerPrimaryKeyMapping, _ = queries.BindMapping(manufacturerType, manufacturerMapping, manufacturerPrimaryKeyColumns)
	manufacturerInsertCacheMut       sync.RWMutex
	manufacturerInsertCache          = make(map[string]insertCache)
	manufacturerUpdateCacheMut       sync.RWMutex
	manufacturerUpdateCache          = make(map[string]updateCache)
	manufacturerUpsertCacheMut       sync.RWMutex
	manufacturerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var manufacturerBeforeInsertHooks []ManufacturerHook
var manufacturerBeforeUpdateHooks []ManufacturerHook
var manufacturerBeforeDeleteHooks []ManufacturerHook
var manufacturerBeforeUpsertHooks []ManufacturerHook

var manufacturerAfterInsertHooks []ManufacturerHook
var manufacturerAfterSelectHooks []ManufacturerHook
var manufacturerAfterUpdateHooks []ManufacturerHook
var manufacturerAfterDeleteHooks []ManufacturerHook
var manufacturerAfterUpsertHooks []ManufacturerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Manufacturer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range manufacturerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Manufacturer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range manufacturerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Manufacturer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range manufacturerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Manufacturer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range manufacturerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Manufacturer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range manufacturerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Manufacturer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range manufacturerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Manufacturer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range manufacturerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Manufacturer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range manufacturerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Manufacturer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range manufacturerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddManufacturerHook registers your hook function for all future operations.
func AddManufacturerHook(hookPoint boil.HookPoint, manufacturerHook ManufacturerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		manufacturerBeforeInsertHooks = append(manufacturerBeforeInsertHooks, manufacturerHook)
	case boil.BeforeUpdateHook:
		manufacturerBeforeUpdateHooks = append(manufacturerBeforeUpdateHooks, manufacturerHook)
	case boil.BeforeDeleteHook:
		manufacturerBeforeDeleteHooks = append(manufacturerBeforeDeleteHooks, manufacturerHook)
	case boil.BeforeUpsertHook:
		manufacturerBeforeUpsertHooks = append(manufacturerBeforeUpsertHooks, manufacturerHook)
	case boil.AfterInsertHook:
		manufacturerAfterInsertHooks = append(manufacturerAfterInsertHooks, manufacturerHook)
	case boil.AfterSelectHook:
		manufacturerAfterSelectHooks = append(manufacturerAfterSelectHooks, manufacturerHook)
	case boil.AfterUpdateHook:
		manufacturerAfterUpdateHooks = append(manufacturerAfterUpdateHooks, manufacturerHook)
	case boil.AfterDeleteHook:
		manufacturerAfterDeleteHooks = append(manufacturerAfterDeleteHooks, manufacturerHook)
	case boil.AfterUpsertHook:
		manufacturerAfterUpsertHooks = append(manufacturerAfterUpsertHooks, manufacturerHook)
	}
}

// One returns a single manufacturer record from the query.
func (q manufacturerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Manufacturer, error) {
	o := &Manufacturer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for manufacturers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Manufacturer records from the query.
func (q manufacturerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ManufacturerSlice, error) {
	var o []*Manufacturer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Manufacturer slice")
	}

	if len(manufacturerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Manufacturer records in the query.
func (q manufacturerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count manufacturers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q manufacturerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if manufacturers exists")
	}

	return count > 0, nil
}

// Country pointed to by the foreign key.
func (o *Manufacturer) Country(mods ...qm.QueryMod) countryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CountryID),
	}

	queryMods = append(queryMods, mods...)

	query := Countries(queryMods...)
	queries.SetFrom(query.Query, "`countries`")

	return query
}

// Currency pointed to by the foreign key.
func (o *Manufacturer) Currency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Currencies(queryMods...)
	queries.SetFrom(query.Query, "`currencies`")

	return query
}

// Discounts retrieves all the discount's Discounts with an executor.
func (o *Manufacturer) Discounts(mods ...qm.QueryMod) discountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`discounts`.`manufacturer_id`=?", o.ID),
	)

	query := Discounts(queryMods...)
	queries.SetFrom(query.Query, "`discounts`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`discounts`.*"})
	}

	return query
}

// Pricelists retrieves all the pricelist's Pricelists with an executor.
func (o *Manufacturer) Pricelists(mods ...qm.QueryMod) pricelistQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`pricelists`.`manufacturer_id`=?", o.ID),
	)

	query := Pricelists(queryMods...)
	queries.SetFrom(query.Query, "`pricelists`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`pricelists`.*"})
	}

	return query
}

// Products retrieves all the product's Products with an executor.
func (o *Manufacturer) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`products`.`manufacturer_id`=?", o.ID),
	)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "`products`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`products`.*"})
	}

	return query
}

// LoadCountry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (manufacturerL) LoadCountry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManufacturer interface{}, mods queries.Applicator) error {
	var slice []*Manufacturer
	var object *Manufacturer

	if singular {
		object = maybeManufacturer.(*Manufacturer)
	} else {
		slice = *maybeManufacturer.(*[]*Manufacturer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &manufacturerR{}
		}
		args = append(args, object.CountryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &manufacturerR{}
			}

			for _, a := range args {
				if a == obj.CountryID {
					continue Outer
				}
			}

			args = append(args, obj.CountryID)
		}
	}

	query := NewQuery(qm.From(`countries`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Country")
	}

	var resultSlice []*Country
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Country")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for countries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for countries")
	}

	if len(manufacturerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Country = foreign
		if foreign.R == nil {
			foreign.R = &countryR{}
		}
		foreign.R.Manufacturers = append(foreign.R.Manufacturers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CountryID == foreign.ID {
				local.R.Country = foreign
				if foreign.R == nil {
					foreign.R = &countryR{}
				}
				foreign.R.Manufacturers = append(foreign.R.Manufacturers, local)
				break
			}
		}
	}

	return nil
}

// LoadCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (manufacturerL) LoadCurrency(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManufacturer interface{}, mods queries.Applicator) error {
	var slice []*Manufacturer
	var object *Manufacturer

	if singular {
		object = maybeManufacturer.(*Manufacturer)
	} else {
		slice = *maybeManufacturer.(*[]*Manufacturer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &manufacturerR{}
		}
		args = append(args, object.CurrencyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &manufacturerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CurrencyID) {
					continue Outer
				}
			}

			args = append(args, obj.CurrencyID)
		}
	}

	query := NewQuery(qm.From(`currencies`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currencies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currencies")
	}

	if len(manufacturerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Currency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.Manufacturers = append(foreign.R.Manufacturers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CurrencyID, foreign.ID) {
				local.R.Currency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.Manufacturers = append(foreign.R.Manufacturers, local)
				break
			}
		}
	}

	return nil
}

// LoadDiscounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (manufacturerL) LoadDiscounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManufacturer interface{}, mods queries.Applicator) error {
	var slice []*Manufacturer
	var object *Manufacturer

	if singular {
		object = maybeManufacturer.(*Manufacturer)
	} else {
		slice = *maybeManufacturer.(*[]*Manufacturer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &manufacturerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &manufacturerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`discounts`), qm.WhereIn(`manufacturer_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load discounts")
	}

	var resultSlice []*Discount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice discounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on discounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for discounts")
	}

	if len(discountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Discounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &discountR{}
			}
			foreign.R.Manufacturer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ManufacturerID {
				local.R.Discounts = append(local.R.Discounts, foreign)
				if foreign.R == nil {
					foreign.R = &discountR{}
				}
				foreign.R.Manufacturer = local
				break
			}
		}
	}

	return nil
}

// LoadPricelists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (manufacturerL) LoadPricelists(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManufacturer interface{}, mods queries.Applicator) error {
	var slice []*Manufacturer
	var object *Manufacturer

	if singular {
		object = maybeManufacturer.(*Manufacturer)
	} else {
		slice = *maybeManufacturer.(*[]*Manufacturer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &manufacturerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &manufacturerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`pricelists`), qm.WhereIn(`manufacturer_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pricelists")
	}

	var resultSlice []*Pricelist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pricelists")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pricelists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pricelists")
	}

	if len(pricelistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Pricelists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pricelistR{}
			}
			foreign.R.Manufacturer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ManufacturerID {
				local.R.Pricelists = append(local.R.Pricelists, foreign)
				if foreign.R == nil {
					foreign.R = &pricelistR{}
				}
				foreign.R.Manufacturer = local
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (manufacturerL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManufacturer interface{}, mods queries.Applicator) error {
	var slice []*Manufacturer
	var object *Manufacturer

	if singular {
		object = maybeManufacturer.(*Manufacturer)
	} else {
		slice = *maybeManufacturer.(*[]*Manufacturer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &manufacturerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &manufacturerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`products`), qm.WhereIn(`manufacturer_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Manufacturer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ManufacturerID {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Manufacturer = local
				break
			}
		}
	}

	return nil
}

// SetCountry of the manufacturer to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.Manufacturers.
func (o *Manufacturer) SetCountry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Country) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `manufacturers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
		strmangle.WhereClause("`", "`", 0, manufacturerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CountryID = related.ID
	if o.R == nil {
		o.R = &manufacturerR{
			Country: related,
		}
	} else {
		o.R.Country = related
	}

	if related.R == nil {
		related.R = &countryR{
			Manufacturers: ManufacturerSlice{o},
		}
	} else {
		related.R.Manufacturers = append(related.R.Manufacturers, o)
	}

	return nil
}

// SetCurrency of the manufacturer to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.Manufacturers.
func (o *Manufacturer) SetCurrency(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `manufacturers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"currency_id"}),
		strmangle.WhereClause("`", "`", 0, manufacturerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CurrencyID, related.ID)
	if o.R == nil {
		o.R = &manufacturerR{
			Currency: related,
		}
	} else {
		o.R.Currency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			Manufacturers: ManufacturerSlice{o},
		}
	} else {
		related.R.Manufacturers = append(related.R.Manufacturers, o)
	}

	return nil
}

// RemoveCurrency relationship.
// Sets o.R.Currency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Manufacturer) RemoveCurrency(ctx context.Context, exec boil.ContextExecutor, related *Currency) error {
	var err error

	queries.SetScanner(&o.CurrencyID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("currency_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Currency = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Manufacturers {
		if queries.Equal(o.CurrencyID, ri.CurrencyID) {
			continue
		}

		ln := len(related.R.Manufacturers)
		if ln > 1 && i < ln-1 {
			related.R.Manufacturers[i] = related.R.Manufacturers[ln-1]
		}
		related.R.Manufacturers = related.R.Manufacturers[:ln-1]
		break
	}
	return nil
}

// AddDiscounts adds the given related objects to the existing relationships
// of the manufacturer, optionally inserting them as new records.
// Appends related to o.R.Discounts.
// Sets related.R.Manufacturer appropriately.
func (o *Manufacturer) AddDiscounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Discount) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManufacturerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `discounts` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"manufacturer_id"}),
				strmangle.WhereClause("`", "`", 0, discountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManufacturerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &manufacturerR{
			Discounts: related,
		}
	} else {
		o.R.Discounts = append(o.R.Discounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &discountR{
				Manufacturer: o,
			}
		} else {
			rel.R.Manufacturer = o
		}
	}
	return nil
}

// AddPricelists adds the given related objects to the existing relationships
// of the manufacturer, optionally inserting them as new records.
// Appends related to o.R.Pricelists.
// Sets related.R.Manufacturer appropriately.
func (o *Manufacturer) AddPricelists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pricelist) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManufacturerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `pricelists` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"manufacturer_id"}),
				strmangle.WhereClause("`", "`", 0, pricelistPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManufacturerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &manufacturerR{
			Pricelists: related,
		}
	} else {
		o.R.Pricelists = append(o.R.Pricelists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pricelistR{
				Manufacturer: o,
			}
		} else {
			rel.R.Manufacturer = o
		}
	}
	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the manufacturer, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Manufacturer appropriately.
func (o *Manufacturer) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManufacturerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `products` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"manufacturer_id"}),
				strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManufacturerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &manufacturerR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Manufacturer: o,
			}
		} else {
			rel.R.Manufacturer = o
		}
	}
	return nil
}

// Manufacturers retrieves all the records using an executor.
func Manufacturers(mods ...qm.QueryMod) manufacturerQuery {
	mods = append(mods, qm.From("`manufacturers`"))
	return manufacturerQuery{NewQuery(mods...)}
}

// FindManufacturer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindManufacturer(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Manufacturer, error) {
	manufacturerObj := &Manufacturer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `manufacturers` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, manufacturerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from manufacturers")
	}

	return manufacturerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Manufacturer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no manufacturers provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(manufacturerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	manufacturerInsertCacheMut.RLock()
	cache, cached := manufacturerInsertCache[key]
	manufacturerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			manufacturerColumns,
			manufacturerColumnsWithDefault,
			manufacturerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(manufacturerType, manufacturerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(manufacturerType, manufacturerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `manufacturers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `manufacturers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `manufacturers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, manufacturerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into manufacturers")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == manufacturerMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for manufacturers")
	}

CacheNoHooks:
	if !cached {
		manufacturerInsertCacheMut.Lock()
		manufacturerInsertCache[key] = cache
		manufacturerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Manufacturer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Manufacturer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	manufacturerUpdateCacheMut.RLock()
	cache, cached := manufacturerUpdateCache[key]
	manufacturerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			manufacturerColumns,
			manufacturerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update manufacturers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `manufacturers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, manufacturerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(manufacturerType, manufacturerMapping, append(wl, manufacturerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update manufacturers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for manufacturers")
	}

	if !cached {
		manufacturerUpdateCacheMut.Lock()
		manufacturerUpdateCache[key] = cache
		manufacturerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q manufacturerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for manufacturers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for manufacturers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ManufacturerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), manufacturerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `manufacturers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, manufacturerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in manufacturer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all manufacturer")
	}
	return rowsAff, nil
}

var mySQLManufacturerUniqueColumns = []string{
	"id",
	"brand_name",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Manufacturer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no manufacturers provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(manufacturerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLManufacturerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	manufacturerUpsertCacheMut.RLock()
	cache, cached := manufacturerUpsertCache[key]
	manufacturerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			manufacturerColumns,
			manufacturerColumnsWithDefault,
			manufacturerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			manufacturerColumns,
			manufacturerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert manufacturers, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "manufacturers", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `manufacturers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(manufacturerType, manufacturerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(manufacturerType, manufacturerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for manufacturers")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == manufacturerMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(manufacturerType, manufacturerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for manufacturers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for manufacturers")
	}

CacheNoHooks:
	if !cached {
		manufacturerUpsertCacheMut.Lock()
		manufacturerUpsertCache[key] = cache
		manufacturerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Manufacturer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Manufacturer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Manufacturer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), manufacturerPrimaryKeyMapping)
	sql := "DELETE FROM `manufacturers` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from manufacturers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for manufacturers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q manufacturerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no manufacturerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from manufacturers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for manufacturers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ManufacturerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Manufacturer slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(manufacturerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), manufacturerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `manufacturers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, manufacturerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from manufacturer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for manufacturers")
	}

	if len(manufacturerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Manufacturer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindManufacturer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ManufacturerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ManufacturerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), manufacturerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `manufacturers`.* FROM `manufacturers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, manufacturerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ManufacturerSlice")
	}

	*o = slice

	return nil
}

// ManufacturerExists checks if the Manufacturer row exists.
func ManufacturerExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `manufacturers` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if manufacturers exists")
	}

	return exists, nil
}
