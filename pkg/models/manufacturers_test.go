// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testManufacturers(t *testing.T) {
	t.Parallel()

	query := Manufacturers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testManufacturersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Manufacturers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testManufacturersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Manufacturers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Manufacturers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testManufacturersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ManufacturerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Manufacturers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testManufacturersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ManufacturerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Manufacturer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ManufacturerExists to return true, but got false.")
	}
}

func testManufacturersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	manufacturerFound, err := FindManufacturer(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if manufacturerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testManufacturersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Manufacturers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testManufacturersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Manufacturers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testManufacturersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	manufacturerOne := &Manufacturer{}
	manufacturerTwo := &Manufacturer{}
	if err = randomize.Struct(seed, manufacturerOne, manufacturerDBTypes, false, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}
	if err = randomize.Struct(seed, manufacturerTwo, manufacturerDBTypes, false, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = manufacturerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = manufacturerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Manufacturers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testManufacturersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	manufacturerOne := &Manufacturer{}
	manufacturerTwo := &Manufacturer{}
	if err = randomize.Struct(seed, manufacturerOne, manufacturerDBTypes, false, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}
	if err = randomize.Struct(seed, manufacturerTwo, manufacturerDBTypes, false, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = manufacturerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = manufacturerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Manufacturers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func manufacturerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Manufacturer) error {
	*o = Manufacturer{}
	return nil
}

func manufacturerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Manufacturer) error {
	*o = Manufacturer{}
	return nil
}

func manufacturerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Manufacturer) error {
	*o = Manufacturer{}
	return nil
}

func manufacturerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Manufacturer) error {
	*o = Manufacturer{}
	return nil
}

func manufacturerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Manufacturer) error {
	*o = Manufacturer{}
	return nil
}

func manufacturerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Manufacturer) error {
	*o = Manufacturer{}
	return nil
}

func manufacturerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Manufacturer) error {
	*o = Manufacturer{}
	return nil
}

func manufacturerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Manufacturer) error {
	*o = Manufacturer{}
	return nil
}

func manufacturerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Manufacturer) error {
	*o = Manufacturer{}
	return nil
}

func testManufacturersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Manufacturer{}
	o := &Manufacturer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, manufacturerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Manufacturer object: %s", err)
	}

	AddManufacturerHook(boil.BeforeInsertHook, manufacturerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	manufacturerBeforeInsertHooks = []ManufacturerHook{}

	AddManufacturerHook(boil.AfterInsertHook, manufacturerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	manufacturerAfterInsertHooks = []ManufacturerHook{}

	AddManufacturerHook(boil.AfterSelectHook, manufacturerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	manufacturerAfterSelectHooks = []ManufacturerHook{}

	AddManufacturerHook(boil.BeforeUpdateHook, manufacturerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	manufacturerBeforeUpdateHooks = []ManufacturerHook{}

	AddManufacturerHook(boil.AfterUpdateHook, manufacturerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	manufacturerAfterUpdateHooks = []ManufacturerHook{}

	AddManufacturerHook(boil.BeforeDeleteHook, manufacturerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	manufacturerBeforeDeleteHooks = []ManufacturerHook{}

	AddManufacturerHook(boil.AfterDeleteHook, manufacturerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	manufacturerAfterDeleteHooks = []ManufacturerHook{}

	AddManufacturerHook(boil.BeforeUpsertHook, manufacturerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	manufacturerBeforeUpsertHooks = []ManufacturerHook{}

	AddManufacturerHook(boil.AfterUpsertHook, manufacturerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	manufacturerAfterUpsertHooks = []ManufacturerHook{}
}

func testManufacturersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Manufacturers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testManufacturersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(manufacturerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Manufacturers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testManufacturerToManyDiscounts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Manufacturer
	var b, c Discount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, discountDBTypes, false, discountColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, discountDBTypes, false, discountColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ManufacturerID = a.ID
	c.ManufacturerID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	discount, err := a.Discounts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range discount {
		if v.ManufacturerID == b.ManufacturerID {
			bFound = true
		}
		if v.ManufacturerID == c.ManufacturerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ManufacturerSlice{&a}
	if err = a.L.LoadDiscounts(ctx, tx, false, (*[]*Manufacturer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Discounts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Discounts = nil
	if err = a.L.LoadDiscounts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Discounts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", discount)
	}
}

func testManufacturerToManyPricelists(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Manufacturer
	var b, c Pricelist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pricelistDBTypes, false, pricelistColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pricelistDBTypes, false, pricelistColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ManufacturerID = a.ID
	c.ManufacturerID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pricelist, err := a.Pricelists().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pricelist {
		if v.ManufacturerID == b.ManufacturerID {
			bFound = true
		}
		if v.ManufacturerID == c.ManufacturerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ManufacturerSlice{&a}
	if err = a.L.LoadPricelists(ctx, tx, false, (*[]*Manufacturer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Pricelists); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Pricelists = nil
	if err = a.L.LoadPricelists(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Pricelists); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pricelist)
	}
}

func testManufacturerToManyProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Manufacturer
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ManufacturerID = a.ID
	c.ManufacturerID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	product, err := a.Products().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range product {
		if v.ManufacturerID == b.ManufacturerID {
			bFound = true
		}
		if v.ManufacturerID == c.ManufacturerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ManufacturerSlice{&a}
	if err = a.L.LoadProducts(ctx, tx, false, (*[]*Manufacturer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Products = nil
	if err = a.L.LoadProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", product)
	}
}

func testManufacturerToManyAddOpDiscounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Manufacturer
	var b, c, d, e Discount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, manufacturerDBTypes, false, strmangle.SetComplement(manufacturerPrimaryKeyColumns, manufacturerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Discount{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, discountDBTypes, false, strmangle.SetComplement(discountPrimaryKeyColumns, discountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Discount{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDiscounts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ManufacturerID {
			t.Error("foreign key was wrong value", a.ID, first.ManufacturerID)
		}
		if a.ID != second.ManufacturerID {
			t.Error("foreign key was wrong value", a.ID, second.ManufacturerID)
		}

		if first.R.Manufacturer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Manufacturer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Discounts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Discounts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Discounts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testManufacturerToManyAddOpPricelists(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Manufacturer
	var b, c, d, e Pricelist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, manufacturerDBTypes, false, strmangle.SetComplement(manufacturerPrimaryKeyColumns, manufacturerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Pricelist{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pricelistDBTypes, false, strmangle.SetComplement(pricelistPrimaryKeyColumns, pricelistColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Pricelist{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPricelists(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ManufacturerID {
			t.Error("foreign key was wrong value", a.ID, first.ManufacturerID)
		}
		if a.ID != second.ManufacturerID {
			t.Error("foreign key was wrong value", a.ID, second.ManufacturerID)
		}

		if first.R.Manufacturer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Manufacturer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Pricelists[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Pricelists[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Pricelists().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testManufacturerToManyAddOpProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Manufacturer
	var b, c, d, e Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, manufacturerDBTypes, false, strmangle.SetComplement(manufacturerPrimaryKeyColumns, manufacturerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Product{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Product{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ManufacturerID {
			t.Error("foreign key was wrong value", a.ID, first.ManufacturerID)
		}
		if a.ID != second.ManufacturerID {
			t.Error("foreign key was wrong value", a.ID, second.ManufacturerID)
		}

		if first.R.Manufacturer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Manufacturer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Products[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Products[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Products().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testManufacturerToOneCountryUsingCountry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Manufacturer
	var foreign Country

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, manufacturerDBTypes, false, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CountryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ManufacturerSlice{&local}
	if err = local.L.LoadCountry(ctx, tx, false, (*[]*Manufacturer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testManufacturerToOneCurrencyUsingCurrency(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Manufacturer
	var foreign Currency

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, currencyDBTypes, false, currencyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Currency struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CurrencyID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Currency().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ManufacturerSlice{&local}
	if err = local.L.LoadCurrency(ctx, tx, false, (*[]*Manufacturer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Currency == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Currency = nil
	if err = local.L.LoadCurrency(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Currency == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testManufacturerToOneSetOpCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Manufacturer
	var b, c Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, manufacturerDBTypes, false, strmangle.SetComplement(manufacturerPrimaryKeyColumns, manufacturerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Country{&b, &c} {
		err = a.SetCountry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Manufacturers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CountryID != x.ID {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CountryID != x.ID {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}
func testManufacturerToOneSetOpCurrencyUsingCurrency(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Manufacturer
	var b, c Currency

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, manufacturerDBTypes, false, strmangle.SetComplement(manufacturerPrimaryKeyColumns, manufacturerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, currencyDBTypes, false, strmangle.SetComplement(currencyPrimaryKeyColumns, currencyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, currencyDBTypes, false, strmangle.SetComplement(currencyPrimaryKeyColumns, currencyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Currency{&b, &c} {
		err = a.SetCurrency(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Currency != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Manufacturers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CurrencyID, x.ID) {
			t.Error("foreign key was wrong value", a.CurrencyID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CurrencyID))
		reflect.Indirect(reflect.ValueOf(&a.CurrencyID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CurrencyID, x.ID) {
			t.Error("foreign key was wrong value", a.CurrencyID, x.ID)
		}
	}
}

func testManufacturerToOneRemoveOpCurrencyUsingCurrency(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Manufacturer
	var b Currency

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, manufacturerDBTypes, false, strmangle.SetComplement(manufacturerPrimaryKeyColumns, manufacturerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, currencyDBTypes, false, strmangle.SetComplement(currencyPrimaryKeyColumns, currencyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCurrency(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCurrency(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Currency().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Currency != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CurrencyID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Manufacturers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testManufacturersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testManufacturersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ManufacturerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testManufacturersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Manufacturers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	manufacturerDBTypes = map[string]string{`Agent`: `varchar`, `BrandName`: `varchar`, `CountryID`: `int`, `CreatedAt`: `timestamp`, `CurrencyID`: `int`, `ID`: `int`, `UpdatedAt`: `timestamp`}
	_                   = bytes.MinRead
)

func testManufacturersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(manufacturerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(manufacturerColumns) == len(manufacturerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Manufacturers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testManufacturersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(manufacturerColumns) == len(manufacturerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Manufacturer{}
	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Manufacturers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, manufacturerDBTypes, true, manufacturerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(manufacturerColumns, manufacturerPrimaryKeyColumns) {
		fields = manufacturerColumns
	} else {
		fields = strmangle.SetComplement(
			manufacturerColumns,
			manufacturerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ManufacturerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testManufacturersUpsert(t *testing.T) {
	t.Parallel()

	if len(manufacturerColumns) == len(manufacturerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLManufacturerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Manufacturer{}
	if err = randomize.Struct(seed, &o, manufacturerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Manufacturer: %s", err)
	}

	count, err := Manufacturers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, manufacturerDBTypes, false, manufacturerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Manufacturer: %s", err)
	}

	count, err = Manufacturers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
