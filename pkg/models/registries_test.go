// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRegistries(t *testing.T) {
	t.Parallel()

	query := Registries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRegistriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Registries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegistrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegistriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RegistryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Registry exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RegistryExists to return true, but got false.")
	}
}

func testRegistriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	registryFound, err := FindRegistry(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if registryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRegistriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Registries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRegistriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Registries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRegistriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	registryOne := &Registry{}
	registryTwo := &Registry{}
	if err = randomize.Struct(seed, registryOne, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}
	if err = randomize.Struct(seed, registryTwo, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = registryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = registryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Registries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRegistriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	registryOne := &Registry{}
	registryTwo := &Registry{}
	if err = randomize.Struct(seed, registryOne, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}
	if err = randomize.Struct(seed, registryTwo, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = registryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = registryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func registryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func registryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Registry) error {
	*o = Registry{}
	return nil
}

func testRegistriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Registry{}
	o := &Registry{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, registryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Registry object: %s", err)
	}

	AddRegistryHook(boil.BeforeInsertHook, registryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	registryBeforeInsertHooks = []RegistryHook{}

	AddRegistryHook(boil.AfterInsertHook, registryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	registryAfterInsertHooks = []RegistryHook{}

	AddRegistryHook(boil.AfterSelectHook, registryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	registryAfterSelectHooks = []RegistryHook{}

	AddRegistryHook(boil.BeforeUpdateHook, registryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	registryBeforeUpdateHooks = []RegistryHook{}

	AddRegistryHook(boil.AfterUpdateHook, registryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	registryAfterUpdateHooks = []RegistryHook{}

	AddRegistryHook(boil.BeforeDeleteHook, registryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	registryBeforeDeleteHooks = []RegistryHook{}

	AddRegistryHook(boil.AfterDeleteHook, registryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	registryAfterDeleteHooks = []RegistryHook{}

	AddRegistryHook(boil.BeforeUpsertHook, registryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	registryBeforeUpsertHooks = []RegistryHook{}

	AddRegistryHook(boil.AfterUpsertHook, registryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	registryAfterUpsertHooks = []RegistryHook{}
}

func testRegistriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegistriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(registryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegistryToManyRegistryBuilds(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b, c RegistryBuild

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, registryBuildDBTypes, false, registryBuildColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, registryBuildDBTypes, false, registryBuildColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RegistryID = a.ID
	c.RegistryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	registryBuild, err := a.RegistryBuilds().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range registryBuild {
		if v.RegistryID == b.RegistryID {
			bFound = true
		}
		if v.RegistryID == c.RegistryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RegistrySlice{&a}
	if err = a.L.LoadRegistryBuilds(ctx, tx, false, (*[]*Registry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RegistryBuilds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RegistryBuilds = nil
	if err = a.L.LoadRegistryBuilds(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RegistryBuilds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", registryBuild)
	}
}

func testRegistryToManyRegistryFieldStats(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b, c RegistryFieldStat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, registryFieldStatDBTypes, false, registryFieldStatColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, registryFieldStatDBTypes, false, registryFieldStatColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RegistryID, a.ID)
	queries.Assign(&c.RegistryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	registryFieldStat, err := a.RegistryFieldStats().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range registryFieldStat {
		if queries.Equal(v.RegistryID, b.RegistryID) {
			bFound = true
		}
		if queries.Equal(v.RegistryID, c.RegistryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RegistrySlice{&a}
	if err = a.L.LoadRegistryFieldStats(ctx, tx, false, (*[]*Registry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RegistryFieldStats); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RegistryFieldStats = nil
	if err = a.L.LoadRegistryFieldStats(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RegistryFieldStats); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", registryFieldStat)
	}
}

func testRegistryToManyRegistryManufacturers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b, c RegistryManufacturer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, registryManufacturerDBTypes, false, registryManufacturerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, registryManufacturerDBTypes, false, registryManufacturerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RegistryID = a.ID
	c.RegistryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	registryManufacturer, err := a.RegistryManufacturers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range registryManufacturer {
		if v.RegistryID == b.RegistryID {
			bFound = true
		}
		if v.RegistryID == c.RegistryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RegistrySlice{&a}
	if err = a.L.LoadRegistryManufacturers(ctx, tx, false, (*[]*Registry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RegistryManufacturers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RegistryManufacturers = nil
	if err = a.L.LoadRegistryManufacturers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RegistryManufacturers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", registryManufacturer)
	}
}

func testRegistryToManyAddOpRegistryBuilds(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b, c, d, e RegistryBuild

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RegistryBuild{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, registryBuildDBTypes, false, strmangle.SetComplement(registryBuildPrimaryKeyColumns, registryBuildColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RegistryBuild{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRegistryBuilds(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RegistryID {
			t.Error("foreign key was wrong value", a.ID, first.RegistryID)
		}
		if a.ID != second.RegistryID {
			t.Error("foreign key was wrong value", a.ID, second.RegistryID)
		}

		if first.R.Registry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Registry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RegistryBuilds[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RegistryBuilds[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RegistryBuilds().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRegistryToManyAddOpRegistryFieldStats(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b, c, d, e RegistryFieldStat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RegistryFieldStat{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, registryFieldStatDBTypes, false, strmangle.SetComplement(registryFieldStatPrimaryKeyColumns, registryFieldStatColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RegistryFieldStat{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRegistryFieldStats(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RegistryID) {
			t.Error("foreign key was wrong value", a.ID, first.RegistryID)
		}
		if !queries.Equal(a.ID, second.RegistryID) {
			t.Error("foreign key was wrong value", a.ID, second.RegistryID)
		}

		if first.R.Registry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Registry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RegistryFieldStats[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RegistryFieldStats[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RegistryFieldStats().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRegistryToManySetOpRegistryFieldStats(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b, c, d, e RegistryFieldStat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RegistryFieldStat{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, registryFieldStatDBTypes, false, strmangle.SetComplement(registryFieldStatPrimaryKeyColumns, registryFieldStatColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRegistryFieldStats(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRegistryFieldStats(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RegistryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RegistryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RegistryID) {
		t.Error("foreign key was wrong value", a.ID, d.RegistryID)
	}
	if !queries.Equal(a.ID, e.RegistryID) {
		t.Error("foreign key was wrong value", a.ID, e.RegistryID)
	}

	if b.R.Registry != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Registry != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Registry != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Registry != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RegistryFieldStats[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RegistryFieldStats[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRegistryToManyRemoveOpRegistryFieldStats(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b, c, d, e RegistryFieldStat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RegistryFieldStat{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, registryFieldStatDBTypes, false, strmangle.SetComplement(registryFieldStatPrimaryKeyColumns, registryFieldStatColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRegistryFieldStats(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRegistryFieldStats(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RegistryFieldStats().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RegistryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RegistryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Registry != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Registry != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Registry != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Registry != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RegistryFieldStats) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RegistryFieldStats[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RegistryFieldStats[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRegistryToManyAddOpRegistryManufacturers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b, c, d, e RegistryManufacturer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RegistryManufacturer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, registryManufacturerDBTypes, false, strmangle.SetComplement(registryManufacturerPrimaryKeyColumns, registryManufacturerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RegistryManufacturer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRegistryManufacturers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RegistryID {
			t.Error("foreign key was wrong value", a.ID, first.RegistryID)
		}
		if a.ID != second.RegistryID {
			t.Error("foreign key was wrong value", a.ID, second.RegistryID)
		}

		if first.R.Registry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Registry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RegistryManufacturers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RegistryManufacturers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RegistryManufacturers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRegistryToOneRegistryStatusUsingRegistryStatus(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Registry
	var foreign RegistryStatus

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, registryDBTypes, false, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, registryStatusDBTypes, false, registryStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegistryStatus struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RegistryStatusID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RegistryStatus().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RegistrySlice{&local}
	if err = local.L.LoadRegistryStatus(ctx, tx, false, (*[]*Registry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RegistryStatus == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RegistryStatus = nil
	if err = local.L.LoadRegistryStatus(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RegistryStatus == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRegistryToOneSetOpRegistryStatusUsingRegistryStatus(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Registry
	var b, c RegistryStatus

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registryDBTypes, false, strmangle.SetComplement(registryPrimaryKeyColumns, registryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, registryStatusDBTypes, false, strmangle.SetComplement(registryStatusPrimaryKeyColumns, registryStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, registryStatusDBTypes, false, strmangle.SetComplement(registryStatusPrimaryKeyColumns, registryStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RegistryStatus{&b, &c} {
		err = a.SetRegistryStatus(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RegistryStatus != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Registries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RegistryStatusID != x.ID {
			t.Error("foreign key was wrong value", a.RegistryStatusID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RegistryStatusID))
		reflect.Indirect(reflect.ValueOf(&a.RegistryStatusID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RegistryStatusID != x.ID {
			t.Error("foreign key was wrong value", a.RegistryStatusID, x.ID)
		}
	}
}

func testRegistriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegistriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegistrySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegistriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Registries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	registryDBTypes = map[string]string{`CreatedAt`: `timestamp`, `Duration`: `int`, `ExpireDate`: `timestamp`, `ID`: `int`, `IssueDate`: `timestamp`, `Link`: `varchar`, `Number`: `varchar`, `RegistryStatusID`: `int`, `Title`: `text`, `UpdatedAt`: `timestamp`}
	_               = bytes.MinRead
)

func testRegistriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(registryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(registryColumns) == len(registryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, registryDBTypes, true, registryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRegistriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(registryColumns) == len(registryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Registry{}
	if err = randomize.Struct(seed, o, registryDBTypes, true, registryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, registryDBTypes, true, registryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(registryColumns, registryPrimaryKeyColumns) {
		fields = registryColumns
	} else {
		fields = strmangle.SetComplement(
			registryColumns,
			registryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RegistrySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRegistriesUpsert(t *testing.T) {
	t.Parallel()

	if len(registryColumns) == len(registryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRegistryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Registry{}
	if err = randomize.Struct(seed, &o, registryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Registry: %s", err)
	}

	count, err := Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, registryDBTypes, false, registryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Registry struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Registry: %s", err)
	}

	count, err = Registries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
