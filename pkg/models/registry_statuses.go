// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RegistryStatus is an object representing the database table.
type RegistryStatus struct {
	ID    uint   `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title string `boil:"title" json:"title" toml:"title" yaml:"title"`

	R *registryStatusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L registryStatusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RegistryStatusColumns = struct {
	ID    string
	Title string
}{
	ID:    "id",
	Title: "title",
}

// RegistryStatusRels is where relationship names are stored.
var RegistryStatusRels = struct {
	Registries string
}{
	Registries: "Registries",
}

// registryStatusR is where relationships are stored.
type registryStatusR struct {
	Registries RegistrySlice
}

// NewStruct creates a new relationship struct
func (*registryStatusR) NewStruct() *registryStatusR {
	return &registryStatusR{}
}

// registryStatusL is where Load methods for each relationship are stored.
type registryStatusL struct{}

var (
	registryStatusColumns               = []string{"id", "title"}
	registryStatusColumnsWithoutDefault = []string{"id", "title"}
	registryStatusColumnsWithDefault    = []string{}
	registryStatusPrimaryKeyColumns     = []string{"id"}
)

type (
	// RegistryStatusSlice is an alias for a slice of pointers to RegistryStatus.
	// This should generally be used opposed to []RegistryStatus.
	RegistryStatusSlice []*RegistryStatus
	// RegistryStatusHook is the signature for custom RegistryStatus hook methods
	RegistryStatusHook func(context.Context, boil.ContextExecutor, *RegistryStatus) error

	registryStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	registryStatusType                 = reflect.TypeOf(&RegistryStatus{})
	registryStatusMapping              = queries.MakeStructMapping(registryStatusType)
	registryStatusPrimaryKeyMapping, _ = queries.BindMapping(registryStatusType, registryStatusMapping, registryStatusPrimaryKeyColumns)
	registryStatusInsertCacheMut       sync.RWMutex
	registryStatusInsertCache          = make(map[string]insertCache)
	registryStatusUpdateCacheMut       sync.RWMutex
	registryStatusUpdateCache          = make(map[string]updateCache)
	registryStatusUpsertCacheMut       sync.RWMutex
	registryStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var registryStatusBeforeInsertHooks []RegistryStatusHook
var registryStatusBeforeUpdateHooks []RegistryStatusHook
var registryStatusBeforeDeleteHooks []RegistryStatusHook
var registryStatusBeforeUpsertHooks []RegistryStatusHook

var registryStatusAfterInsertHooks []RegistryStatusHook
var registryStatusAfterSelectHooks []RegistryStatusHook
var registryStatusAfterUpdateHooks []RegistryStatusHook
var registryStatusAfterDeleteHooks []RegistryStatusHook
var registryStatusAfterUpsertHooks []RegistryStatusHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RegistryStatus) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryStatusBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RegistryStatus) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryStatusBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RegistryStatus) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryStatusBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RegistryStatus) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryStatusBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RegistryStatus) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryStatusAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RegistryStatus) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryStatusAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RegistryStatus) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryStatusAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RegistryStatus) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryStatusAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RegistryStatus) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range registryStatusAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRegistryStatusHook registers your hook function for all future operations.
func AddRegistryStatusHook(hookPoint boil.HookPoint, registryStatusHook RegistryStatusHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		registryStatusBeforeInsertHooks = append(registryStatusBeforeInsertHooks, registryStatusHook)
	case boil.BeforeUpdateHook:
		registryStatusBeforeUpdateHooks = append(registryStatusBeforeUpdateHooks, registryStatusHook)
	case boil.BeforeDeleteHook:
		registryStatusBeforeDeleteHooks = append(registryStatusBeforeDeleteHooks, registryStatusHook)
	case boil.BeforeUpsertHook:
		registryStatusBeforeUpsertHooks = append(registryStatusBeforeUpsertHooks, registryStatusHook)
	case boil.AfterInsertHook:
		registryStatusAfterInsertHooks = append(registryStatusAfterInsertHooks, registryStatusHook)
	case boil.AfterSelectHook:
		registryStatusAfterSelectHooks = append(registryStatusAfterSelectHooks, registryStatusHook)
	case boil.AfterUpdateHook:
		registryStatusAfterUpdateHooks = append(registryStatusAfterUpdateHooks, registryStatusHook)
	case boil.AfterDeleteHook:
		registryStatusAfterDeleteHooks = append(registryStatusAfterDeleteHooks, registryStatusHook)
	case boil.AfterUpsertHook:
		registryStatusAfterUpsertHooks = append(registryStatusAfterUpsertHooks, registryStatusHook)
	}
}

// One returns a single registryStatus record from the query.
func (q registryStatusQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RegistryStatus, error) {
	o := &RegistryStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for registry_statuses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RegistryStatus records from the query.
func (q registryStatusQuery) All(ctx context.Context, exec boil.ContextExecutor) (RegistryStatusSlice, error) {
	var o []*RegistryStatus

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RegistryStatus slice")
	}

	if len(registryStatusAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RegistryStatus records in the query.
func (q registryStatusQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count registry_statuses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q registryStatusQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if registry_statuses exists")
	}

	return count > 0, nil
}

// Registries retrieves all the registry's Registries with an executor.
func (o *RegistryStatus) Registries(mods ...qm.QueryMod) registryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`registries`.`registry_status_id`=?", o.ID),
	)

	query := Registries(queryMods...)
	queries.SetFrom(query.Query, "`registries`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`registries`.*"})
	}

	return query
}

// LoadRegistries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (registryStatusL) LoadRegistries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegistryStatus interface{}, mods queries.Applicator) error {
	var slice []*RegistryStatus
	var object *RegistryStatus

	if singular {
		object = maybeRegistryStatus.(*RegistryStatus)
	} else {
		slice = *maybeRegistryStatus.(*[]*RegistryStatus)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registryStatusR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registryStatusR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`registries`), qm.WhereIn(`registry_status_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load registries")
	}

	var resultSlice []*Registry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice registries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on registries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for registries")
	}

	if len(registryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Registries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &registryR{}
			}
			foreign.R.RegistryStatus = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RegistryStatusID {
				local.R.Registries = append(local.R.Registries, foreign)
				if foreign.R == nil {
					foreign.R = &registryR{}
				}
				foreign.R.RegistryStatus = local
				break
			}
		}
	}

	return nil
}

// AddRegistries adds the given related objects to the existing relationships
// of the registry_status, optionally inserting them as new records.
// Appends related to o.R.Registries.
// Sets related.R.RegistryStatus appropriately.
func (o *RegistryStatus) AddRegistries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Registry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RegistryStatusID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `registries` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"registry_status_id"}),
				strmangle.WhereClause("`", "`", 0, registryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RegistryStatusID = o.ID
		}
	}

	if o.R == nil {
		o.R = &registryStatusR{
			Registries: related,
		}
	} else {
		o.R.Registries = append(o.R.Registries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &registryR{
				RegistryStatus: o,
			}
		} else {
			rel.R.RegistryStatus = o
		}
	}
	return nil
}

// RegistryStatuses retrieves all the records using an executor.
func RegistryStatuses(mods ...qm.QueryMod) registryStatusQuery {
	mods = append(mods, qm.From("`registry_statuses`"))
	return registryStatusQuery{NewQuery(mods...)}
}

// FindRegistryStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRegistryStatus(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*RegistryStatus, error) {
	registryStatusObj := &RegistryStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `registry_statuses` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, registryStatusObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from registry_statuses")
	}

	return registryStatusObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RegistryStatus) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no registry_statuses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(registryStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	registryStatusInsertCacheMut.RLock()
	cache, cached := registryStatusInsertCache[key]
	registryStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			registryStatusColumns,
			registryStatusColumnsWithDefault,
			registryStatusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(registryStatusType, registryStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(registryStatusType, registryStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `registry_statuses` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `registry_statuses` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `registry_statuses` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, registryStatusPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into registry_statuses")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for registry_statuses")
	}

CacheNoHooks:
	if !cached {
		registryStatusInsertCacheMut.Lock()
		registryStatusInsertCache[key] = cache
		registryStatusInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RegistryStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RegistryStatus) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	registryStatusUpdateCacheMut.RLock()
	cache, cached := registryStatusUpdateCache[key]
	registryStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			registryStatusColumns,
			registryStatusPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update registry_statuses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `registry_statuses` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, registryStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(registryStatusType, registryStatusMapping, append(wl, registryStatusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update registry_statuses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for registry_statuses")
	}

	if !cached {
		registryStatusUpdateCacheMut.Lock()
		registryStatusUpdateCache[key] = cache
		registryStatusUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q registryStatusQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for registry_statuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for registry_statuses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RegistryStatusSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registryStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `registry_statuses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registryStatusPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in registryStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all registryStatus")
	}
	return rowsAff, nil
}

var mySQLRegistryStatusUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RegistryStatus) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no registry_statuses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(registryStatusColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRegistryStatusUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	registryStatusUpsertCacheMut.RLock()
	cache, cached := registryStatusUpsertCache[key]
	registryStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			registryStatusColumns,
			registryStatusColumnsWithDefault,
			registryStatusColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			registryStatusColumns,
			registryStatusPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert registry_statuses, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "registry_statuses", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `registry_statuses` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(registryStatusType, registryStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(registryStatusType, registryStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for registry_statuses")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(registryStatusType, registryStatusMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for registry_statuses")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for registry_statuses")
	}

CacheNoHooks:
	if !cached {
		registryStatusUpsertCacheMut.Lock()
		registryStatusUpsertCache[key] = cache
		registryStatusUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RegistryStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RegistryStatus) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RegistryStatus provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), registryStatusPrimaryKeyMapping)
	sql := "DELETE FROM `registry_statuses` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from registry_statuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for registry_statuses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q registryStatusQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no registryStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from registry_statuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for registry_statuses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RegistryStatusSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RegistryStatus slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(registryStatusBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registryStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `registry_statuses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registryStatusPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from registryStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for registry_statuses")
	}

	if len(registryStatusAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RegistryStatus) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRegistryStatus(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RegistryStatusSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RegistryStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registryStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `registry_statuses`.* FROM `registry_statuses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registryStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RegistryStatusSlice")
	}

	*o = slice

	return nil
}

// RegistryStatusExists checks if the RegistryStatus row exists.
func RegistryStatusExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `registry_statuses` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if registry_statuses exists")
	}

	return exists, nil
}
