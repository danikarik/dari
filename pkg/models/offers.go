// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Offer is an object representing the database table.
type Offer struct {
	ID                 uint          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Subject            string        `boil:"subject" json:"subject" toml:"subject" yaml:"subject"`
	ProductID          null.Uint     `boil:"product_id" json:"product_id,omitempty" toml:"product_id" yaml:"product_id,omitempty"`
	Description        null.String   `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	DeliveryTime       int           `boil:"delivery_time" json:"delivery_time" toml:"delivery_time" yaml:"delivery_time"`
	DeliveryConditions null.String   `boil:"delivery_conditions" json:"delivery_conditions,omitempty" toml:"delivery_conditions" yaml:"delivery_conditions,omitempty"`
	AdditionalServices null.String   `boil:"additional_services" json:"additional_services,omitempty" toml:"additional_services" yaml:"additional_services,omitempty"`
	Guarantee          int           `boil:"guarantee" json:"guarantee" toml:"guarantee" yaml:"guarantee"`
	ExpireDate         null.Time     `boil:"expire_date" json:"expire_date,omitempty" toml:"expire_date" yaml:"expire_date,omitempty"`
	CustomerID         null.Uint     `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	UserID             null.Uint     `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	FinalPrice         types.Decimal `boil:"final_price" json:"final_price" toml:"final_price" yaml:"final_price"`
	IsArchive          bool          `boil:"is_archive" json:"is_archive" toml:"is_archive" yaml:"is_archive"`
	CreatedAt          null.Time     `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time     `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *offerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L offerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OfferColumns = struct {
	ID                 string
	Subject            string
	ProductID          string
	Description        string
	DeliveryTime       string
	DeliveryConditions string
	AdditionalServices string
	Guarantee          string
	ExpireDate         string
	CustomerID         string
	UserID             string
	FinalPrice         string
	IsArchive          string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	Subject:            "subject",
	ProductID:          "product_id",
	Description:        "description",
	DeliveryTime:       "delivery_time",
	DeliveryConditions: "delivery_conditions",
	AdditionalServices: "additional_services",
	Guarantee:          "guarantee",
	ExpireDate:         "expire_date",
	CustomerID:         "customer_id",
	UserID:             "user_id",
	FinalPrice:         "final_price",
	IsArchive:          "is_archive",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

// OfferRels is where relationship names are stored.
var OfferRels = struct {
	Customer string
	Product  string
	User     string
}{
	Customer: "Customer",
	Product:  "Product",
	User:     "User",
}

// offerR is where relationships are stored.
type offerR struct {
	Customer *Customer
	Product  *Product
	User     *User
}

// NewStruct creates a new relationship struct
func (*offerR) NewStruct() *offerR {
	return &offerR{}
}

// offerL is where Load methods for each relationship are stored.
type offerL struct{}

var (
	offerColumns               = []string{"id", "subject", "product_id", "description", "delivery_time", "delivery_conditions", "additional_services", "guarantee", "expire_date", "customer_id", "user_id", "final_price", "is_archive", "created_at", "updated_at"}
	offerColumnsWithoutDefault = []string{"subject", "product_id", "description", "delivery_time", "delivery_conditions", "additional_services", "guarantee", "expire_date", "customer_id", "user_id", "final_price", "created_at", "updated_at"}
	offerColumnsWithDefault    = []string{"id", "is_archive"}
	offerPrimaryKeyColumns     = []string{"id"}
)

type (
	// OfferSlice is an alias for a slice of pointers to Offer.
	// This should generally be used opposed to []Offer.
	OfferSlice []*Offer
	// OfferHook is the signature for custom Offer hook methods
	OfferHook func(context.Context, boil.ContextExecutor, *Offer) error

	offerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	offerType                 = reflect.TypeOf(&Offer{})
	offerMapping              = queries.MakeStructMapping(offerType)
	offerPrimaryKeyMapping, _ = queries.BindMapping(offerType, offerMapping, offerPrimaryKeyColumns)
	offerInsertCacheMut       sync.RWMutex
	offerInsertCache          = make(map[string]insertCache)
	offerUpdateCacheMut       sync.RWMutex
	offerUpdateCache          = make(map[string]updateCache)
	offerUpsertCacheMut       sync.RWMutex
	offerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var offerBeforeInsertHooks []OfferHook
var offerBeforeUpdateHooks []OfferHook
var offerBeforeDeleteHooks []OfferHook
var offerBeforeUpsertHooks []OfferHook

var offerAfterInsertHooks []OfferHook
var offerAfterSelectHooks []OfferHook
var offerAfterUpdateHooks []OfferHook
var offerAfterDeleteHooks []OfferHook
var offerAfterUpsertHooks []OfferHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Offer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range offerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Offer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range offerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Offer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range offerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Offer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range offerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Offer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range offerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Offer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range offerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Offer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range offerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Offer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range offerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Offer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range offerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOfferHook registers your hook function for all future operations.
func AddOfferHook(hookPoint boil.HookPoint, offerHook OfferHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		offerBeforeInsertHooks = append(offerBeforeInsertHooks, offerHook)
	case boil.BeforeUpdateHook:
		offerBeforeUpdateHooks = append(offerBeforeUpdateHooks, offerHook)
	case boil.BeforeDeleteHook:
		offerBeforeDeleteHooks = append(offerBeforeDeleteHooks, offerHook)
	case boil.BeforeUpsertHook:
		offerBeforeUpsertHooks = append(offerBeforeUpsertHooks, offerHook)
	case boil.AfterInsertHook:
		offerAfterInsertHooks = append(offerAfterInsertHooks, offerHook)
	case boil.AfterSelectHook:
		offerAfterSelectHooks = append(offerAfterSelectHooks, offerHook)
	case boil.AfterUpdateHook:
		offerAfterUpdateHooks = append(offerAfterUpdateHooks, offerHook)
	case boil.AfterDeleteHook:
		offerAfterDeleteHooks = append(offerAfterDeleteHooks, offerHook)
	case boil.AfterUpsertHook:
		offerAfterUpsertHooks = append(offerAfterUpsertHooks, offerHook)
	}
}

// One returns a single offer record from the query.
func (q offerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Offer, error) {
	o := &Offer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for offers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Offer records from the query.
func (q offerQuery) All(ctx context.Context, exec boil.ContextExecutor) (OfferSlice, error) {
	var o []*Offer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Offer slice")
	}

	if len(offerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Offer records in the query.
func (q offerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count offers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q offerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if offers exists")
	}

	return count > 0, nil
}

// Customer pointed to by the foreign key.
func (o *Offer) Customer(mods ...qm.QueryMod) customerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	query := Customers(queryMods...)
	queries.SetFrom(query.Query, "`customers`")

	return query
}

// Product pointed to by the foreign key.
func (o *Offer) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "`products`")

	return query
}

// User pointed to by the foreign key.
func (o *Offer) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (offerL) LoadCustomer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOffer interface{}, mods queries.Applicator) error {
	var slice []*Offer
	var object *Offer

	if singular {
		object = maybeOffer.(*Offer)
	} else {
		slice = *maybeOffer.(*[]*Offer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &offerR{}
		}
		args = append(args, object.CustomerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CustomerID) {
					continue Outer
				}
			}

			args = append(args, obj.CustomerID)
		}
	}

	query := NewQuery(qm.From(`customers`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Customer")
	}

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Customer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for customers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customers")
	}

	if len(offerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Customer = foreign
		if foreign.R == nil {
			foreign.R = &customerR{}
		}
		foreign.R.Offers = append(foreign.R.Offers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CustomerID, foreign.ID) {
				local.R.Customer = foreign
				if foreign.R == nil {
					foreign.R = &customerR{}
				}
				foreign.R.Offers = append(foreign.R.Offers, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (offerL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOffer interface{}, mods queries.Applicator) error {
	var slice []*Offer
	var object *Offer

	if singular {
		object = maybeOffer.(*Offer)
	} else {
		slice = *maybeOffer.(*[]*Offer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &offerR{}
		}
		args = append(args, object.ProductID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductID) {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)
		}
	}

	query := NewQuery(qm.From(`products`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(offerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.Offers = append(foreign.R.Offers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductID, foreign.ID) {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Offers = append(foreign.R.Offers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (offerL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOffer interface{}, mods queries.Applicator) error {
	var slice []*Offer
	var object *Offer

	if singular {
		object = maybeOffer.(*Offer)
	} else {
		slice = *maybeOffer.(*[]*Offer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &offerR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(offerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Offers = append(foreign.R.Offers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Offers = append(foreign.R.Offers, local)
				break
			}
		}
	}

	return nil
}

// SetCustomer of the offer to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.Offers.
func (o *Offer) SetCustomer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Customer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `offers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"customer_id"}),
		strmangle.WhereClause("`", "`", 0, offerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CustomerID, related.ID)
	if o.R == nil {
		o.R = &offerR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &customerR{
			Offers: OfferSlice{o},
		}
	} else {
		related.R.Offers = append(related.R.Offers, o)
	}

	return nil
}

// RemoveCustomer relationship.
// Sets o.R.Customer to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Offer) RemoveCustomer(ctx context.Context, exec boil.ContextExecutor, related *Customer) error {
	var err error

	queries.SetScanner(&o.CustomerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("customer_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Customer = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Offers {
		if queries.Equal(o.CustomerID, ri.CustomerID) {
			continue
		}

		ln := len(related.R.Offers)
		if ln > 1 && i < ln-1 {
			related.R.Offers[i] = related.R.Offers[ln-1]
		}
		related.R.Offers = related.R.Offers[:ln-1]
		break
	}
	return nil
}

// SetProduct of the offer to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.Offers.
func (o *Offer) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `offers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
		strmangle.WhereClause("`", "`", 0, offerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductID, related.ID)
	if o.R == nil {
		o.R = &offerR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			Offers: OfferSlice{o},
		}
	} else {
		related.R.Offers = append(related.R.Offers, o)
	}

	return nil
}

// RemoveProduct relationship.
// Sets o.R.Product to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Offer) RemoveProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.ProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Product = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Offers {
		if queries.Equal(o.ProductID, ri.ProductID) {
			continue
		}

		ln := len(related.R.Offers)
		if ln > 1 && i < ln-1 {
			related.R.Offers[i] = related.R.Offers[ln-1]
		}
		related.R.Offers = related.R.Offers[:ln-1]
		break
	}
	return nil
}

// SetUser of the offer to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Offers.
func (o *Offer) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `offers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, offerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &offerR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Offers: OfferSlice{o},
		}
	} else {
		related.R.Offers = append(related.R.Offers, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Offer) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.User = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Offers {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.Offers)
		if ln > 1 && i < ln-1 {
			related.R.Offers[i] = related.R.Offers[ln-1]
		}
		related.R.Offers = related.R.Offers[:ln-1]
		break
	}
	return nil
}

// Offers retrieves all the records using an executor.
func Offers(mods ...qm.QueryMod) offerQuery {
	mods = append(mods, qm.From("`offers`"))
	return offerQuery{NewQuery(mods...)}
}

// FindOffer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOffer(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Offer, error) {
	offerObj := &Offer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `offers` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, offerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from offers")
	}

	return offerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Offer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no offers provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(offerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	offerInsertCacheMut.RLock()
	cache, cached := offerInsertCache[key]
	offerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			offerColumns,
			offerColumnsWithDefault,
			offerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(offerType, offerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(offerType, offerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `offers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `offers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `offers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, offerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into offers")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == offerMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for offers")
	}

CacheNoHooks:
	if !cached {
		offerInsertCacheMut.Lock()
		offerInsertCache[key] = cache
		offerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Offer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Offer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	offerUpdateCacheMut.RLock()
	cache, cached := offerUpdateCache[key]
	offerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			offerColumns,
			offerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update offers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `offers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, offerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(offerType, offerMapping, append(wl, offerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update offers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for offers")
	}

	if !cached {
		offerUpdateCacheMut.Lock()
		offerUpdateCache[key] = cache
		offerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q offerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for offers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OfferSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `offers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, offerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in offer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all offer")
	}
	return rowsAff, nil
}

var mySQLOfferUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Offer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no offers provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(offerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOfferUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	offerUpsertCacheMut.RLock()
	cache, cached := offerUpsertCache[key]
	offerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			offerColumns,
			offerColumnsWithDefault,
			offerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			offerColumns,
			offerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert offers, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "offers", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `offers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(offerType, offerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(offerType, offerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for offers")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == offerMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(offerType, offerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for offers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for offers")
	}

CacheNoHooks:
	if !cached {
		offerUpsertCacheMut.Lock()
		offerUpsertCache[key] = cache
		offerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Offer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Offer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Offer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), offerPrimaryKeyMapping)
	sql := "DELETE FROM `offers` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for offers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q offerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no offerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for offers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OfferSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Offer slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(offerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `offers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, offerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from offer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for offers")
	}

	if len(offerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Offer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOffer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OfferSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OfferSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `offers`.* FROM `offers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, offerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OfferSlice")
	}

	*o = slice

	return nil
}

// OfferExists checks if the Offer row exists.
func OfferExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `offers` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if offers exists")
	}

	return exists, nil
}
