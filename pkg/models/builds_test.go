// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBuilds(t *testing.T) {
	t.Parallel()

	query := Builds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBuildsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Builds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuildsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Builds().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Builds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuildsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BuildSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Builds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuildsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BuildExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Build exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BuildExists to return true, but got false.")
	}
}

func testBuildsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	buildFound, err := FindBuild(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if buildFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBuildsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Builds().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBuildsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Builds().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBuildsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	buildOne := &Build{}
	buildTwo := &Build{}
	if err = randomize.Struct(seed, buildOne, buildDBTypes, false, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}
	if err = randomize.Struct(seed, buildTwo, buildDBTypes, false, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = buildOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = buildTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Builds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBuildsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	buildOne := &Build{}
	buildTwo := &Build{}
	if err = randomize.Struct(seed, buildOne, buildDBTypes, false, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}
	if err = randomize.Struct(seed, buildTwo, buildDBTypes, false, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = buildOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = buildTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Builds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func buildBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Build) error {
	*o = Build{}
	return nil
}

func buildAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Build) error {
	*o = Build{}
	return nil
}

func buildAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Build) error {
	*o = Build{}
	return nil
}

func buildBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Build) error {
	*o = Build{}
	return nil
}

func buildAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Build) error {
	*o = Build{}
	return nil
}

func buildBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Build) error {
	*o = Build{}
	return nil
}

func buildAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Build) error {
	*o = Build{}
	return nil
}

func buildBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Build) error {
	*o = Build{}
	return nil
}

func buildAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Build) error {
	*o = Build{}
	return nil
}

func testBuildsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Build{}
	o := &Build{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, buildDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Build object: %s", err)
	}

	AddBuildHook(boil.BeforeInsertHook, buildBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	buildBeforeInsertHooks = []BuildHook{}

	AddBuildHook(boil.AfterInsertHook, buildAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	buildAfterInsertHooks = []BuildHook{}

	AddBuildHook(boil.AfterSelectHook, buildAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	buildAfterSelectHooks = []BuildHook{}

	AddBuildHook(boil.BeforeUpdateHook, buildBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	buildBeforeUpdateHooks = []BuildHook{}

	AddBuildHook(boil.AfterUpdateHook, buildAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	buildAfterUpdateHooks = []BuildHook{}

	AddBuildHook(boil.BeforeDeleteHook, buildBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	buildBeforeDeleteHooks = []BuildHook{}

	AddBuildHook(boil.AfterDeleteHook, buildAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	buildAfterDeleteHooks = []BuildHook{}

	AddBuildHook(boil.BeforeUpsertHook, buildBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	buildBeforeUpsertHooks = []BuildHook{}

	AddBuildHook(boil.AfterUpsertHook, buildAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	buildAfterUpsertHooks = []BuildHook{}
}

func testBuildsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Builds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBuildsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(buildColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Builds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBuildToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Build
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BuildSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*Build)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBuildToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Build
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, buildDBTypes, false, strmangle.SetComplement(buildPrimaryKeyColumns, buildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Builds[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}

func testBuildToOneRemoveOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Build
	var b Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, buildDBTypes, false, strmangle.SetComplement(buildPrimaryKeyColumns, buildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Product().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Product != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Builds) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBuildsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBuildsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BuildSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBuildsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Builds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	buildDBTypes = map[string]string{`CreatedAt`: `timestamp`, `ID`: `int`, `PartNumber`: `varchar`, `Price`: `int`, `ProductID`: `int`, `Quantity`: `int`, `Title`: `text`, `UpdatedAt`: `timestamp`}
	_            = bytes.MinRead
)

func testBuildsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(buildPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(buildColumns) == len(buildPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Builds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, buildDBTypes, true, buildPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBuildsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(buildColumns) == len(buildPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Build{}
	if err = randomize.Struct(seed, o, buildDBTypes, true, buildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Builds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, buildDBTypes, true, buildPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(buildColumns, buildPrimaryKeyColumns) {
		fields = buildColumns
	} else {
		fields = strmangle.SetComplement(
			buildColumns,
			buildPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BuildSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBuildsUpsert(t *testing.T) {
	t.Parallel()

	if len(buildColumns) == len(buildPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBuildUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Build{}
	if err = randomize.Struct(seed, &o, buildDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Build: %s", err)
	}

	count, err := Builds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, buildDBTypes, false, buildPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Build struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Build: %s", err)
	}

	count, err = Builds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
